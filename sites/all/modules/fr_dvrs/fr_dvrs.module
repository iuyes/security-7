<?php


/**
 * Implements hook_menu()
 *
 */
function fr_dvrs_menu() {
	$items = array();
	$items['ajax/dvr-reveal-modals'] = array(
		'page callback' => 'fr_groups_dvr_modal_callback',
		'type' => MENU_CALLBACK,
		'access callback' => TRUE,
	);
	$items['ajax/alarm-proccessor-dvr'] = array(
		'page callback' => 'alarm_processing_query_dvr',
		'type' => MENU_CALLBACK,
		'access callback' => TRUE,
	);
	$items['fr_dvrs/processing-filters'] = array(
		'page callback' => 'fr_dvrs_process_filters',
		'type' => MENU_CALLBACK,
		'access callback' => TRUE,
		'page arguments' => array(1),
	);
  $items['fr_dvrs/%/%ctools_js'] = array(
    'page callback' => 'fr_dvrs_callback',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
	return $items;
}



/**
 * @ callback for handling the alarm processing filters
 *
 */
function fr_dvrs_process_filters($data = NULL){

global $user;
	$return_data = array('html' => 'Sorry, filters are available at this time');
	$uid = !empty($_POST['arguments']['data']) ? $_POST['arguments']['data'] : NULL;
	if(!empty($uid) && $user->uid == $uid){
		$form = drupal_get_form('fr_dvrs_processing_filter_form');
		$form = drupal_render($form);
		$return_data = array('html' => $form);
	}
  
		drupal_json_output($return_data);
		drupal_exit();

}




/**
 * Ctools functions to ad the necessary jsvascript librarys
 */
function fr_dvrs_ctools_modal() {
  // Load the modal library and add the modal javascript.
  ctools_include('modal');
  ctools_modal_add_js();
}





/**
 * Ctools Ajax menu callback.
 */
function fr_dvrs_callback($form = NULL, $ajax) {
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
    
    switch($form){
	    case 'fr_dvrs_processing_settings_form':
	    	$title = 'Alarm Processing Settings';
	    	break;
	    case 'fr_dvrs_processing_filter_form':
	    	$title = 'Alarm Processing Filters';
	    	break;
    }
 
    $form_state = array(
      'ajax' => TRUE,
      'title' => t($title),
    );
 
    // Use ctools to generate ajax instructions for the browser to create
    // a form in a modal popup.
    $output = ctools_modal_form_wrapper($form, $form_state);
 
    // If the form has been submitted, there may be additional instructions
    // such as dismissing the modal popup.
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }
 
    // Return the ajax instructions to the browser via ajax_render().
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form($form);
  }
}




/**
 * Ctools Helper function to make a link.
 */
function _fr_dvrs_make_link($link_text = NULL, $form = NULL) {
  // Set a default value if no text in supplied.
  if (empty($link_text)) {
    $link_text = 'Filters';
  }
  return '<div class="button edit">' . l($link_text, 'fr_dvrs/'.$form.'/nojs', array('attributes' => array('class' => 'ctools-use-modal'))) . '</div>';
}





/**
 * @ function hook_form_alter()
 * @ form that appears in the processing modal
 */
function fr_dvrs_processing_settings_form($form, &$form_state){
	$form = array();
	
	$form['wrapper'] = array(
		'#type' => 'vertical_tabs',
	);
	$form['alarm_adio'] = array(
		'#type' => 'fieldset',
		'#title' => t('Alarm Audio'),
		'#collapsible' => FALSE,
		'#group' => 'wrapper',
		'#attributes' => array(
			'class' => array('large-12', 'columns'),
		),
	);
	
	$form['alarm_adio']['audio'] = array(
		'#type' => 'checkbox',
		'#title' => t('Turn the alarm audio off'),
		'#options' => array(
			'0' => 'Off',
 		),
 		//'#default_value' => array(1),
		'#ajax' => array(
			'callback' => 'fr_dvrs_processing_settings_form_submit',
			'wrapper' => '',
			'method' => 'replace',
			'effect' => 'fade',
		),	
	);
	
	return $form;
}




function fr_dvrs_processing_settings_form_submit($form, &$form_state){
	//for filters
	$value = $form_state['triggering_element']['#value'];
	drupal_add_js(array('processingSettings' => array('audio' => $value)), 'setting');
	//for settings
	$id = $form_state['triggering_element']['#name'];
	drupal_add_js(array('processingCache' => array('element' => array('id' => $id, 'value' => $value))), 'setting');
	return $form_state['triggering_element']; 
}

/**
 * @ function hook_form_alter()
 * @ form that appears in the processing modal
 */
function fr_dvrs_processing_filter_form($node, &$form_states){
	drupal_add_css(drupal_get_path('module', 'fr_groups') .'/css/fr_groups_tableset.css', array('type' => 'file', 'scope' => 'footer'));
	$form = array();
	$options = array();
	//get account, alarm, and dvr info
	$account = new FortifiedGroups();
	$dvrs = fr_tweaks_query_dvrs($account->account_id);
	$alarms = $account->QueryAlarms();
	$alarms = $account->account_information->alarm_information;
	$alarms = !empty($alarms) ? current($alarms) : NULL;
	
	//build the form
	if(!empty($alarms)){
		$header = array('Open', 'Restore', 'Close', 'Alarm', 'Bypass');
		//filter vertical tab
		
		$form['update'] = array(
			'#type' => 'markup',
			'#markup' => '',
			'#attributes' => array(
				'id' => 'update-filters',
			),
			'#weight' => -100,
		);
		
		if(!empty($form_state['values'])){
			$form['update'] = array(
				'#type' => 'markup',
				'#markup' => '',
				'#attributes' => array(
					'id' => 'update-filters',
					'class' => array('update-filters'),
				),
				'#weight' => -100,
		);
		}
		
		if(!empty($alarms)){
		$default_value = array(1, 2, 3, 4, 5);
			foreach($alarms as $batname => $batdata){
				$options = array();
				if(!empty($batdata['zone_aliases'])){
					$options = array();
					foreach($batdata['zone_aliases'] as $zone_num => $zonedata){
						for( $i = 1; $i <= 5; $i++ ){
							$options[$i] = '';
						}
						$form['zones'][$zone_num] = array(
								'#type' => 'checkboxes',
								'#title' => $zonedata['zone_name'].'<br/><span class="filter-desc">( '.$batname.' )</span>',
								'#options' => $options,
								'#attributes' => array(
									'class' => array('filter-checkbox-wrapper'),
								),
								'#default_value' => $default_value,
								'#ajax' => array(
						      'callback' => 'fr_dvrs_processing_filter_form_submit',
						      'wrapper' => 'update-filters',
						      'method' => 'replace',
						      'effect' => 'fade',
						    ),
						);
					}
				}
			}
		}
	}
	
	
/*
	$form['submit'][] = array(
		'#name' => 'save_pref',
		'#type' => 'submit',
		'#value' => 'Save',
		'#ajax' => array(
			'callback' => 'fr_dvrs_processing_filter_form_submit',
			'wrapper' => 'pref-formm',
			'method' => 'replace',
			'effect' => 'fade',
		),
	);
*/

	
	$form['#theme'] = 'fr_groups';
	$form['#prefix'] = '<div id="pref-formm" class"pref-formm">';
	$form['#suffix'] = '</div>';
	
	return $form;
}


/**
 * form submit handler for our processing filter form
 *
 */
function fr_dvrs_processing_filter_form_submit($form, &$form_state){
	//for filters
	$value = $form_state['triggering_element']['#value'];
	$zone = $form_state['triggering_element']['#parents'][0];
	$signal_code = $form_state['triggering_element']['#parents'][1];
	drupal_add_js(array('processingFilters' => array('filters' => array('value' => $value, 'zone' => $zone, 'signal_node' => $signal_code))), 'setting');
	//for chache
	$id = $form_state['triggering_element']['#name'];
	drupal_add_js(array('processingCache' => array('element' => array('id' => $id, 'value' => $value))), 'setting');
	return $form_state['triggering_element'];

}


/**
 * ajax callback function for admins / central stations to bring up clients dvrs on alarm
 *
 */
function alarm_processing_query_dvr(){
	$account_id = $_POST['account'];
	if($account_id){
		$account_dvrs = fr_tweaks_query_dvrs($account_id);
		$format_dvrs = _fr_dvrs_helper_modal_data($account_dvrs, 12, 'admin');
		$dvr_list = array(
			'#theme' => 'item_list',
			'#items' => $format_dvrs,
			'#attributes' => array(
				'class' => array('dvr-processing-list', '', ''),
			),
			'#weight' => -100,
		);
	}
	drupal_json_output(array('html' => drupal_render($dvr_list)));
	drupal_exit();
}




function _fr_dvrs_helper_modal_data($dvrs, $li_size = NULL, $type){
	$items = array();
	foreach($dvrs as $nid => $data){
		if(!empty($data) && isset($data)){
			$dvr = '<div ';
			switch($type){
			case 'user':
				if(!empty($data->dvr_credentials)){
					$user_name = !empty($data->dvr_credentials['dvr_username']) ? $data->dvr_credentials['dvr_username'] : NULL;
					$password = !empty($data->dvr_credentials['dvr_password']) ? $data->dvr_credentials['dvr_password'] : NULL;
					$dvr .= 'data-dvr-user="'.$user_name.'" data-dvr-password="'.$password.'" data-dvr-id="'.$nid.'" class="dvr-object large-'.$li_size.' columns" ';
				}
				break;
			case 'admin':
				$password = !empty($data->field_dvr_master_password) ? $data->field_dvr_master_password : NULL;
				$user_name = !empty($data->field_dvr_master_username) ? $data->field_dvr_master_username : NULL;
				$dvr .= 'data-dvr-user="'.$user_name.'" data-dvr-password="'.$password.'" data-dvr-id="'.$nid.'" class="dvr-object large-'.$li_size.' columns" ';
				break;
			}
			if(!empty($data->dvr_url)){
				$dvr .= 'data-dvr-url="'.$data->dvr_url.'">';
			}
			if(!empty($data->dvr_title)){
				$dvr .= $data->dvr_title;
			}
			$dvr .= '</div>';
			$items[] = array(
				'data' => $dvr,
				'class' => array(''),
			);
		}
	}
	return $items;
}



/**
 * ajax callback function to open all dvrs up in a modal
 *
 */
function fr_dvrs_build_all_dvr_modal($dvrs, $arg, $uid = NULL){
	ctools_include('modal');
  ctools_include('ajax');
  ctools_modal_add_js();
	$items = array();
	$content = array();

	switch($arg){
	case 'cms':
		$wrapper_class = array('dvr-cms-wrapper', 'large-12', 'columns', 'reveal-modal', 'xlarge');
		$close_modal = _fr_groups_markup('<div class="close-cms-modal close-modal">&#215;</div>', 'close-cms-modal large-12 columns', -101);
		$list_width = '2';
		$extra_class = 'cms';
		$li_size = '12';
		$iframe_size = '10';
		/* $title = _fr_groups_markup('<div>DVR SYSTEMS</div>', 'dvr-cms-title row', -100); */
		break;
	case 'processing':
		$wrapper_class = array('dvr-cms-wrapper', 'large-12', 'columns');
		$close_modal = NULL;
		$list_width = '12';
		$extra_class = 'processing';
		$li_size = '2';
		$iframe_size = '12';
		/* $title = _fr_groups_markup('<div class="modal-title">ALARM PROCESSING</div>', 'dvr-cms-title large-12 large-centered columns', -100); */
		break;
	}

	$content['wrapper'] = array(
		'#type' => 'container',
		'#attributes' => array(
			'class' => $wrapper_class,
			'id' => 'dvr-'.$arg.'-modal',
		),
	);


	$content['wrapper']['close_modal'] = $close_modal;
/* 	$content['wrapper']['title'] = $title; */

	if(!empty($dvrs)){
		$items = _fr_dvrs_helper_modal_data($dvrs, $li_size, 'user');
		if($extra_class == 'processing'){
			$items[] = '<a href="#" class="close-dvr-object">Close DVR</a>';
		}
	}

	$dvr_list = array(
		'#theme' => 'item_list',
		'#items' => $items,
		'#attributes' => array(
			'class' => array('dvr-'.$extra_class.'-list', '', ''),
		),
		'#weight' => -99,
	);

	$list_wrapper = array(
		'class' => 'dvr-'.$extra_class.'-list-wrapper',
		'subclass' => 'account-static-section',
		'title' => 'Available DVRs',
		'actions' => '',
		'status' => 'static',
		'weight' => -98,
		'inner' => array(
			'status' => 'open',
			'class' => 'dvr-'.$extra_class.'-markup-container',
			'markup' => drupal_render($dvr_list),
		),
	);
	$content['wrapper']['dvr_list'] = fr_groups_accordion_fieldset($list_wrapper);
	$content['wrapper']['dvr_object'] = fr_groups_markup('<div id="dvr-cms-inner"></div>', 'dvr-'.$extra_class.'-container large-'.$iframe_size.' columns', 'dvr-cms-container');
	return drupal_render($content);
}



/**
 * ajax callback function for admins and central stations
 *
 */
function fr_dvrs_build_admin_dvr_modal($type){
	$content = array();
	switch($type){
	case 'processing':

		break;
	case 'cms':

		break;
	}

	$content['wrapper'] = array(
		'#type' => 'container',
		'#attributes' => array(
			'id' => 'dvr-'.$type.'-modal',
		),
	);

	$list_wrapper = array(
		'class' => 'dvr-'.$type.'-list-wrapper',
		'subclass' => 'account-static-section',
		'title' => 'Available DVRs',
		'actions' => '',
		'status' => 'static',
		'weight' => -99,
		'inner' => array(
			'status' => 'open',
			'class' => 'dvr-'.$type.'-markup-container',
			'markup' => 'DVRs will populate here on an alarm event',
		),
	);
	$content['wrapper']['dvr_fieldset'] = fr_groups_accordion_fieldset($list_wrapper);
	$content['wrapper']['dvr_object'] = fr_groups_markup('<div id="dvr-cms-inner"></div>', 'dvr-'.$type.'-container large-12 columns', 'dvr-cms-container');
	return drupal_render($content);
}




class FortifiedDvrSystems {

	public $account_information;
	public $account_profile;
	public $dvr_permissions = array();
	public $dvrData;

	public function __construct($profile = NULL, $account_information = NULL){
		$this->account_information = $account_information;
		$this->account_profile = $profile;
	}


	/**
	 * Get all the dvrs attatched to Customer Group
	 *
	 */
	public function queryDvrs($account_id = NULL){
		$this->account_information->dvr_credentials = array();
		$account_id = !empty($this->account_information->account_id) ? $this->account_information->account_id : $account_id;
		$DvrData = FALSE;
		$dvrContent = array();
		$permissions = array();
		$query = new EntityFieldQuery();
		$query->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'dvr')
		->fieldCondition('field_cust_alarm_group_owner', 'target_id', $account_id, '=');
		$result = $query->execute();
		if(!empty($result['node'])){
			$results = $result['node'];
			$DvrData = array();
			//get the dvr permissions for this account
			$account_type = $this->account_information->account_type;
			switch($account_type){
			case 'customer':
				$this->dvrPermissions();
				$permissions = $this->dvr_permissions;
				break;
			}
			foreach($results as $key => $data){
				$this->account_information->dvr_information[$key] = $this->structureDvrData($data, $key, $permissions, $account_type);
			}
		}
		if(!empty($this->account_information->dvr_information)){
			return $this->account_information->dvr_information;
		}
	}




	private function structureDvrData($data, $key, $permission = array(), $account_type){
		drupal_add_js(drupal_get_path('module', 'fr_groups') .'/js/fr_groups_fieldsets.js', array('type' => 'file', 'scope' => 'footer'));
		$nodes = node_load($data->nid);
		$auth = FALSE;
		$DvrData = FALSE;
		if($nodes && array_key_exists($nodes->title, $permission)){
			if(in_array('view_dvrs', $permission[$nodes->title])){
				$auth = TRUE;
			}
		}elseif($account_type == 'account_manager'){
			$auth = TRUE;
		}
		if($auth){
			$DvrData = new stdClass();
			$DvrData->dvr_credentials = array();
			foreach($nodes as $nid => $values){
				//if(array_key_exists($nodes->title)
				switch($nid){
				case'title':
					$DvrData->dvr_title = !empty($values) ? $values : NULL;
					switch($this->account_information->account_type){
					case 'account_manager':
						$DvrData->attatched_users = $this->queryDvrUsers($values);
						break;
					}
					break;
				case'field_cust_dvr_url':
					$DvrData->dvr_url = !empty($values['und'][0]['value']) ? $values['und'][0]['value'] : NULL;
					break;
				case'field_cust_virtual_tours':
					$DvrDate->dvr_tours = !empty($values['und'][0]['value']) ? $values['und'][0]['value'] : NULL;
					$this->account_information->has_tours[] = !empty($DvrDate->dvr_tours) ? TRUE : FALSE;
					break;
				case'field_fr_vt_tour_times':
					$DvrData->dvr_tour_times = !empty($values['und'][0]) ? $values['und'][0] : NULL;
					break;
				case 'field_dvr_address':
					$DvrData->field_dvr_address = !empty($values['und'][0]) ? $values['und'][0] : NULL;
					break;
				case 'field_dvr_master_password':
					$DvrData->dvr_credentials['dvr_password'] = !empty($values['und'][0]['value']) ? $values['und'][0]['value'] : NULL;
					break;
				case 'field_dvr_master_username':
					$DvrData->dvr_credentials['dvr_username'] = !empty($values['und'][0]['value']) ? $values['und'][0]['value'] : NULL;
					break;
				}
				switch($account_type){
				case 'customer':
					$DvrData->dvr_credentials['dvr_username'] = !empty($this->account_profile['customer']->field_customer_dvr_username['und'][0]['value']) ? $this->account_profile['customer']->field_customer_dvr_username['und'][0]['value'] : NULL;
					$DvrData->dvr_credentials['dvr_password'] = !empty($this->account_profile['customer']->field_customer_dvr_password['und'][0]['value']) ? $this->account_profile['customer']->field_customer_dvr_password['und'][0]['value'] : NULL;
					break;
				}
			}
		}

		return $DvrData;
	}



	/**
	 * Get this users dvr permissions
	 *
	 */
	public function dvrPermissions($arg = NULL, $permission = FALSE){
		$profile = $this->account_profile;
		$permissions = FALSE;
		if($profile){
			$profile = current($profile);
			foreach($profile as $fields => $values){
				switch($fields){
				case 'field_customer_dvr_permissions':
					if(!empty($values['und'][0]['value'])){
						$this->dvr_permissions = unserialize($values['und'][0]['value']);
						$dvr_permissions = unserialize($values['und'][0]['value']);
						if( !empty($arg) && !empty($permission) && array_key_exists($arg, $dvr_permissions)){
							if(in_array($permission, $dvr_permissions[$arg])){
								$permissions = TRUE;
							}
						}
					}
					break;
				}
			}
		}
		return $permissions;
	}


	/**
	 * build the dvr account section
	 *
	 */
	public function queryDvrUsers($dvr_title){
		$users = array();
		$user_list = array();
		if(!empty($this->account_information->account_users)){
			$account_users = $this->account_information->account_users;
			foreach($account_users as $pid => $data){
				foreach($data as $fields => $values){
					$uid = $data->uid;
					$first_name = !empty($data->field_cust_name['und'][0]['value']) ? $data->field_cust_name['und'][0]['value'] : '';
					$last_name = !empty($data->field_cust_last_name['und'][0]['value']) ? $data->field_cust_last_name['und'][0]['value'] : '';
					switch($fields){
					case 'field_customer_dvr_permissions':
						if(!empty($values['und'][0]['value'])){
							$dvr_permissions = unserialize($values['und'][0]['value']);
							if(array_key_exists($dvr_title, $dvr_permissions)){
								if(in_array('view_dvrs', $dvr_permissions[$dvr_title])){
									$users[] = l($first_name.' '.$last_name, '../../user/'.$uid.'/edit/customer', array());
								}
							}
						}

						break;
					}
				}
			}
		}
		return $users;
	}




	/**
	 * build the dvr account section
	 *
	 */
	public function buildDvrInformation($dvr_data, $tours){
		$items = array();
		$list = array();
		if(!empty($dvr_data)){
			foreach($dvr_data as $nid => $data){
				if(!empty($data) && isset($data)){
					$items[$nid] = new stdClass();
					$items[$nid]->type = 'cam';
					$items[$nid]->title = t($data->dvr_title);
					$items[$nid]->path = 'http://'.$_SERVER['HTTP_HOST'].''.$_SERVER['REQUEST_URI'].'#';
					$items[$nid]->tours = !empty($data->dvr_tour_times['tour_time_days']) ? 'Yes' : 'No';
					$items[$nid]->tour_times = !empty($data->dvr_tour_times['tour_time']) ? str_replace(',', ' - ', $data->dvr_tour_times['tour_time']):NULL;
					$items[$nid]->tour_days = !empty($data->dvr_tour_times['tour_time_days']) ? 'Everyday' : NULL;
					$items[$nid]->Class = 'button star dvr-modal';
					$items[$nid]->Attributes = 'data-dvr-nid="'.$nid.'"';
					$items[$nid]->id = 'myDvrModal';
					$items[$nid]->users = !empty($data->attatched_users) ? $data->attatched_users : NULL;
				}
			}
			//cameras wrapper
			$camera_fieldset = array(
				'class' => 'user-dvr-wrapper',
				'subclass' => 'account-static-section',
				'title' => 'Camera System',
				'actions' => '',
				'status' => 'static',
				'weight' => -98,
				'inner' => array(
					'class' => '',
					'markup' => '',
					'status' => 'open',
				),
			);
			//cms section
			$attributes = 'data-user-id="'.$this->account_information->uid.'" data-cms-role="'.$this->account_information->account_type.'"';
			$cms_button = '<span class="cms-description">Access all of your DVRs inside one area with our</span><div '.$attributes.' class="dvr-cms-reveal button next">CMS MODAL</div>';
			$class = 'user-dash-cms large-12 large-centered columns';
			$camera_fieldset['inner']['markup'] = drupal_render(fr_groups_markup($cms_button, $class, NULL, $attributes));

			//link options
			$options = array(
				'attributes' => array(
					'class' => array('dvr-reveal-link'),
				),
			);

			if(!empty($items)){
				//structure dvrs into render arrays
				foreach($items as $nid => $list_item){
					$inner_cameras_markup = array(
						'class' => 'user-dvr-fieldset',
						'title' => $list_item->title,
						'status' => 'closed',
						'actions' => 'collapsible',
						'weight' => -100,
						'inner' => array(
							'class' => 'fs-depth-2',
							'markup' => '',
							'status' => 'closed'
						),
					);
					$data = '<div class="dvr-data"><label>Remote Login:</label></div><div class="'.$list_item->Class.'" '.$list_item->Attributes.'>'.l($list_item->title, $list_item->path, $options).'</div>';
					$data .= !empty($list_item->tours) ? '<div class="dvr-data"><label>Virtual Tours:</label><div>'.$list_item->tours.'</div></div>' : '';
					$data .= !empty($list_item->tour_times) ? '<div class="dvr-data"><label>Tour Times:</label><div>'.$list_item->tour_times.'</div></div>' : '';
					$data .= !empty($list_item->tour_days) ? '<div class="dvr-data"><label>Tour Days:</label><div>'.$list_item->tour_days.'</div></div>' : '';
					$inner_cameras_markup['inner']['markup'] = drupal_render(_fr_groups_markup($data, 'camera large-12 columns'));

					if(!empty($list_item->users)){
						$inner_cameras_users = array(
							'class' => 'user-camera-users',
							'title' => 'Attached users',
							'status' => 'closed',
							'actions' => 'collapsible',
							'weight' => -100,
							'inner' => array(
								'class' => 'fs-depth-2',
								'markup' => drupal_render(fr_dvrs_markup_item_list($list_item->users, array('large-12', 'columns', 'dvr-attatched-users'))),
								'status' => 'closed',
							),
						);
						$inner_cameras_markup['inner']['markup'] .= drupal_render(fr_groups_accordion_fieldset($inner_cameras_users));
					}
					$camera_fieldset['inner']['markup'] .= drupal_render(fr_groups_accordion_fieldset($inner_cameras_markup));
				}
			}
			if($tours){
				//dvr view reports
				if(in_array(TRUE, $tours)){
					$reports = array(
						'class' => 'account-reports-wrapper',
						'subclass' => 'account-static-section',
						'title' => 'Fortified Reports',
						'status' => 'static',
						'actions' => '',
						'weight' => -96,
						'inner' => array(
							'class' => '',
							'markup' => drupal_render(_fr_groups_views_dvr_reports()),
							'status' => 'open',
						),
					);
					$list['reports'] = fr_groups_accordion_fieldset($reports);
				}
			}
		}
		$list['cameras'] = fr_groups_accordion_fieldset($camera_fieldset);
		return $list;
	}



	public function buildDvrModal(){
		$modals = array();
		$account_information = $this->account_information;
		drupal_add_js(drupal_get_path('module', 'fr_groups') .'/js/fr_groups_modal_all_dvrs.js', array('type' => 'file', 'scope' => 'footer'));
		drupal_add_js(drupal_get_path('module', 'fr_groups') .'/js/fr_groups_reveal_cust_dvr.js', array('type' => 'file', 'scope' => 'footer'));
		drupal_add_js(drupal_get_path('module', 'fr_user_dash') .'/js/fr_user_dash_download.js', array('type' => 'file', 'scope' => 'footer'));
		drupal_add_js(drupal_get_path('module', 'fr_user_dash') .'/js/fr_user_dash.js', array('type' => 'file', 'scope' => 'footer'));
		$dvr_auto_login = !empty($this->account_information->account_prefrences['dvr_auto_login']) ? $this->account_information->account_prefrences['dvr_auto_login'] : NULL;
		foreach($this->account_information->dvr_information as $nid => $data){
			if(!empty($data) && isset($data)){
				//@TODO Create auto login prefrences and check for that here
				$modal = '<div class="close-dvr-modal close-modal">&#215;</div><div class="myDvrModal_'.$nid.' cust-dvr-modal"></div>';
				$dvr_user = !empty($dvr_auto_login) ? $data->dvr_credentials['dvr_username'] : '';
				$dvr_pass = !empty($dvr_auto_login) ? $data->dvr_credentials['dvr_password'] : '';
				$alt_data = 'data-dvr-url="'.$data->dvr_url.'" data-dvr-user="'.$dvr_user.'" data-dvr-pass="'.$dvr_pass.'" data-dvr-function="OnLogin"';
				$class= 'reveal-modal xlarge';
				$id = 'myDvrModal_'.$nid.'';
				$modals[$nid] = fr_groups_markup($modal, $class, $id, $alt_data);
			}
		}
		return $modals;
	}

}

function fr_dvrs_markup_item_list($items, $class = NULL, $id = NULL){
	return array(
		'#theme' => 'item_list',
		'#items' => $items,
		'#attributes' => array(
			'class' => $class,
			'id' => $id,
		),
	);
}

function fr_dvrs_init_dvrs($profile, $account_information){
	$dvrs = new FortifiedDvrSystems($profile, $account_information);
	return $dvrs;
}
