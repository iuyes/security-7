<?php
/*
*
*hook_block_info
*
*/
function fr_user_dash_block_info(){
	// This example comes from node.module.
	$blocks['my_menu'] = array(
		'info' => t('DASHBOARD'),
		'cache' => DRUPAL_NO_CACHE,
	);
	$blocks['my_alarm'] = array(
		'info' => t('MY ALARM'),
		'cache' => DRUPAL_NO_CACHE,
	);
	$blocks['my_reports'] = array(
		'info' => t('INCIDENT REPORTS NEW AND UNSAVED'),
		'cache' => DRUPAL_NO_CACHE,
	);
	$blocks['my_tours'] = array(
		'info' => t('VIRTUAL TOURS NEW AND UNSAVED'),
		'cache' => DRUPAL_NO_CACHE,
	);
	$blocks['my_events'] = array(
		'info' => t('EVENTS NEW AND UNSAVED'),
		'cache' => DRUPAL_NO_CACHE,
	);
	$blocks['saved'] = array(
		'info' => t('MY SAVED FILES'),
		'cache' => DRUPAL_NO_CACHE,
	);
	$blocks['admin_tools'] = array(
		'info' => t('ADMIN TOOLS'),
		'cache' => DRUPAL_NO_CACHE,
	);
	$blocks['admin'] = array(
		'info' => t('ADMIN DASHBOARD'),
		'cache' => DRUPAL_NO_CACHE,
	);
	$blocks['tours_today'] = array(
		'info' => t('TOURS TODAY'),
		'cache' => DRUPAL_NO_CACHE,
	);
	$blocks['admin_alarm_notifications'] = array(
		'info' => t('Alarm Notifications'),
		'cache' => DRUPAL_NO_CACHE,
	);
	$blocks['alarm_processing'] = array(
		'info' => 'Alarm Processing <strong>Beta</strong>',
		'cache' => DRUPAL_NO_CACHE,
	);
	/*
  $blocks['recent_alarms'] = array(
    'info' => t('RECENT ALARM ACTIVITY'),
    'cache' => DRUPAL_NO_CACHE,
  );*/


	return $blocks;
}


function fr_user_dash_usable_homebox_blocks(){
	global $user;
	$uid = $user->uid;
	$bloks = array();
	if(!in_array('administrator', $user->roles) || !in_array('supervisor', $user->roles)){
		$blocks['my_menu'] = TRUE;
		$auth = new FortifiedAuthenticate($user->uid);
		$check_alarm = $auth->serviceType('alarm');
		$data = '';
		$check_access = $auth->alarmSettings('display_alarm_block');
		if($check_access && $check_alarm){
			$blocks['my_alarm'] = TRUE;
		}
		
		$dvrs = new FortifiedDvrs();
		$dvrs->queryDvrs($user->uid);
		if($dvrs->has_dvr == TRUE && $dvrs->has_tours == TRUE){
			$blocks['my_tours'] = TRUE;
			$blocks['my_events'] = TRUE;
			$blocks['saved'] = TRUE;
			$blocks['my_reports'] = TRUE;
			
		}
	}else{
		$blocks['admin_alarm_notifications'] = TRUE;
		$blocks['tours_today'] = TRUE;
		$blocks['admin'] = TRUE;
		$blocks['admin_tools'] = TRUE;
	}
	return $blocks;
}


/*
*
* hook_blck_view
*
*/
function fr_user_dash_block_view($delta = ''){
	global $user;
	$arg = arg();
	
	$content = array();
	$content['wrapper'] = array(
		'#type' => 'container',
		'#attributes'=> array(
			'class' => array('dash-block-wrapper'),
		),
	);
	$content['wrapper']['extra'] = array(
		'#type' => 'container',
		'#attributes'=> array(
			'class' => array('joy-wrapper'),
		),
	);


	$args = array(
		'uid' => $user->uid,
		'name' => $user->name,
		'roles' => $user->roles,
	);


	switch($delta){
	case'my_menu':
		$customer_dash = drupal_render(fr_user_dash_build_dash());
		$data = '';
		if(!empty($customer_dash)){
			$content['wrapper']['extra']['joyride'] = joyWrapper('user_menu', 'first_stop');
			$content['wrapper']['extra']['save'] = array(
				'#type' => 'markup',
				'#markup' => 'Save File',
				'#prefix' => '<div class="save-files four columns">',
				'#suffix' =>'</div>',
			);
			$content['wrapper']['extra']['content'] = array(
				'#type' => 'markup',
				'#markup' => $customer_dash,
			);

			$data = $content;
		}else{
			$data = 'Your account had been created but no customer information has been added.
				 Please email <a href="mailto:info@fortifiedsecurityservices.com">Fortified Security Services</a>To Finish Your Account.</div>';
		}
		if(in_array('administrator', $user->roles) || in_array('supervisor', $user->roles)){
			$data = '';
		}
		$block['content'] = $data;
		break;

		// for alarm block
	case'my_alarm':
		$auth = new FortifiedAuthenticate($user->uid);
		$check_alarm = $auth->serviceType('alarm');
		$data = '';
		$check_access = $auth->alarmSettings('display_alarm_block');
		if($check_access && $check_alarm){
			$uid = $user->uid;
			//$test = ip_datatel_load_alarm_notifications($uid, 'user');
			$content['wrapper']['extra']['joyride'] = joyWrapper('my_alarm', 'sec_stop');
			$test = ip_datatel_load_alarm_profile($uid, 'all', '', '', TRUE);
			//dpm($test);
			$content['wrapper']['extra']['alarm'] = $test;
			$data = drupal_render($content);
		}
		$block['content'] = $data;
		break;
		// end alarm block

		// for alarm processing
	case'alarm_processing':
		$user_arg = in_array('administrator', $user->roles) || in_array('supervisor', $user->roles) ? 'admin' : 'user';
		$processing = fr_user_dash_query_customer_variables($user->uid);
		$data = NULL;
		if(isset($processing['processing'])){
			$alarm_processing = ip_datatel_process_alarm_notifications($user->uid, $user_arg);
			if(!empty($alarm_processing['table'])){
				$data = $alarm_processing['table'];
			}
		}
			$content['wrapper']['extra']['joyride'] = joyWrapper('my_alarm', 'tenth_stop');
			$content['wrapper']['extra']['alarm_processing'] = $data;
		$block['content'] = $data;
		break;
		// end alarm processing

	case'my_reports':
		$data = '';
		if(!in_array('administrator', $user->roles) || !in_array('supervisor', $user->roles)){
			$dvrs = new FortifiedDvrs();
			$dvrs->queryDvrs($user->uid);
			if($dvrs->has_dvr == TRUE && $dvrs->has_tours == TRUE){
				$content['wrapper']['extra']['joyride'] = joyWrapper('user_reports', 'second_stop');
				$content['wrapper']['extra']['content'] = array(
					'#type' => 'markup',
					'#markup' => views_embed_view('view_inc_reports', $display_id = 'block'),
				);
				$data = $content;
			}
		}

		$block['content'] = $data;
		break;

	case'my_tours':
		$data = '';
		if(!in_array('administrator', $user->roles) || !in_array('supervisor', $user->roles)){
			$dvrs = new FortifiedDvrs();
			$dvrs->queryDvrs($user->uid);
			if($dvrs->has_dvr == TRUE && $dvrs->has_tours == TRUE){
				$content = array();

				$content['wrapper']['extra']['joyride'] = joyWrapper('user_tours', 'third_stop');
				$content['wrapper']['extra']['content'] = array(
					'#type' => 'markup',
					'#markup' => views_embed_view('view_virtual_tours', $display_id = 'block'),
				);
				$data = render($content);
			}
		}

		$block['content'] = $data;

		break;

	case'my_events':
		$data = '';
		if(!in_array('administrator', $user->roles) || !in_array('supervisor', $user->roles)){
			$dvrs = new FortifiedDvrs();
			$dvrs->queryDvrs($user->uid);
			if($dvrs->has_dvr == TRUE && $dvrs->has_tours == TRUE){
				$content['wrapper']['extra']['joyride'] = joyWrapper('user_events', 'fourth_stop');
				$content['wrapper']['extra']['content'] = array(
					'#type' => 'markup',
					'#markup' => views_embed_view('view_event_reports', $display_id = 'block'),
				);
				$data = $content;
			}
		}
		$block['content'] = $data;

		break;

	case'saved';
		$data = '';
		if(!in_array('administrator', $user->roles) || !in_array('supervisor', $user->roles)){
			$dvrs = new FortifiedDvrs();
			$dvrs->queryDvrs($user->uid);
			if($dvrs->has_dvr == TRUE && $dvrs->has_tours == TRUE){
				//$content = $dash->loadBlockSingle($user->uid, 'fortified_virtual_tours', 'My Virtual Tours');
				$content['wrapper']['extra'] = array(
					'#type' => 'container',
					'#attributes'=> array(
						'class' => array('joy-wrapper'),
					),
				);
				$content['wrapper']['extra']['joyride'] = joyWrapper('user_saved', 'fifth_stop');
				$content['wrapper']['extra']['saved_files'] = array(
					'#type' => 'markup',
					'#markup' => views_embed_view('saved_virtual_tours', $display_id = 'block'),
				);
				$data = $content;
			}
		}

		$block['content'] = $data;

		break;

	case 'admin_tools':
		if(in_array('administrator', $user->roles) || in_array('supervisor', $user->roles)){
			$tools = new tools();

			$content['wrapper']['extra']['joyride'] = joyWrapper('admin_tools', 'sixth_stop');

			$content['wrapper']['extra']['admin_tools'] = array(
				'#type' => 'markup',
				'#markup' => drupal_render($tools->basicTools()),
			);
			$block['content'] = $content;
		}else{
			$block['content'] = '';
		}

		break;


	case'admin':
		//This is thr admin dashbored we only display to admins
		if(in_array('administrator', $user->roles) || in_array('supervisor', $user->roles)){

			$view = views_embed_view('admin_users_dash', $display_id = 'block');

			$help_title = variable_get('tours', '');

			$content['wrapper']['extra']['admin_view'] = array(
				'#type' => 'markup',
				'#markup' => $view,
			);


			$content['wrapper']['extra']['joyride'] = joyWrapper('admins', 'seventh_stop');

			$block['content'] = $content;
		}else{
			$block['content'] = '';
		}

		break;

	case'admin_alarm_notifications':
		if(in_array('administrator', $user->roles) || in_array('supervisor', $user->roles)){
			$rencent_alarm_activity = ip_datatel_load_alarm_notifications($user->uid);
			$block['content'] = $rencent_alarm_activity;
		}else{
			$block['content'] = '';
		}

		break;


	case'tours_today':

		if(in_array('administrator', $user->roles) || in_array('supervisor', $user->roles)){

			$content['wrapper']['extra']['joyride'] = joyWrapper('admin_tours_today', 'eighth_stop');

			//function in fr_times module
			$view = fr_times_load_customers();
			$content['wrapper'] = array(
				'#type' => 'container',
				'#attributes'=> array(
					'class' => array('dash-block-wrapper'),
				),
			);
			$block['content'] = $view;

		}else{
			$block['content'] = '';
		}

		break;


	}
	return $block;

}


function joyWrapper($type, $stop){
	$content = array(
		'#type' => 'markup',
		'#markup' => buildJoyride($type, $stop),
		'#prefix' => '<div>',
		'#suffix' => '</div>',
		'#weight' => -100,
	);
	return $content;
}


function buildJoyRide($block, $stop){
	$content = '<div id="'.$stop.'"></div>';
	return $content;
}




class tools{

	private function generateMenuList ($list_items) {
		$menu_list = array();
		foreach($list_items as $key => $item){

			switch($item['type']){
			case'refresh':
				$js = 'window.reload();';
				break;
			default:
				$js = '';
				break;
			}
			$options = array();
			$arg = !empty($item['data-reveal-id']) ? 'data-reveal-id' : 'id';

			$path = l($item['title'], $item['path'], $options);
			$list[] = array(
				'data' => $path,
				'class' => $item['class'],
				$arg => $item['data-reveal-id'],
				'onClick' => array($js),
			);
		}
		$menu = array(
			'#theme' => 'item_list',
			'#items' => $list,
			'#type' => 'ul',
			'#attributes' => array('id' => 'basic-tools'),
			'#container_id' => '',
			//'#prefix' => '<section>',
			//'#suffix' => '</section></nav>',
		);
		//dpm($menu);
		return $menu;
	}

	private function buildListItems($array){
		foreach($array as $key => $values){
			$type = $values['type'];
			$title = $values['title'];
			$query = $values['query'];
			$path = $values['path'];
			$class = $values['class'];
			$data_reveal = !empty($values['data-reveal-id']) ? $values['data-reveal-id'] : '';
			$list[] = array(
				'type' => $type,
				'title' => t($title),
				'path' => $path,
				'query' => $query,
				'class' => array('button', $class),
				'data-reveal-id' => $data_reveal,
			);
		}
		//dpm($list);
		$buttons = $this->generateMenuList($list);
		return $buttons;
	}

	public function basicTools(){
		$tools = array();
		$type = array('user', 'users', 'refresh', 'add an alarm', 'prefrences');
		$title = array('Add User', 'Manage Users', 'Refresh Page', 'Add An Alarm', 'Prefrences');
		$path = array('admin/people/create', 'admin/people', '../../user', '../../node/add/alarm', '#');
		$query = array('', '', 'window.refresh();', '', '');
		$class = array('add', 'edit', 'next', 'add', 'next');
		$id = array('', '', '', '', 'myPrefrences');
		$loop = count($type) - 1;
		for($i = 0; $i<=$loop; $i++){
			$data_reveal = empty($id[$i]) ? 'none' : 'data-reveal-id';
			$tools[$i] = array(
				'type' => $type[$i],
				'title' => $title[$i],
				'path' => $path[$i],
				'query' => $query[$i],
				'class' => $class[$i],
				$data_reveal => $id[$i],
			);
		}
		$build = $this->buildListItems($tools);
		return $build;
	}

}


/*
*
*Class for building the user and admin dashboards
*
*/

class dashboard{


	/*
  *
  * Constructor functions for admins
  *
  */

	public function constructDash($args){
		foreach($args as $key => $argument){
			switch($key){
			case'roles':
				$this->user_roles = $argument;
				break;
			default:
				$this->$key = $argument;
				break;
			}
		}
		$user_roles = $this->user_roles;
		if(in_array('administrator', $user_roles)){
			$this->auth = 'admin';
			//unset($this->roles);
		}else{
			$this->auth = 'user';
		}
		$this->has_dvr = FALSE;
		$this->has_alarm = FALSE;
		$this->has_tours = FALSE;
		return $this->user_roles;
	}



	/*
  *
  *Loads the users
  *
  */

	public function loadUsers(){

		if($this->auth == 'admin'){
			$has_multi = 0;
		}else{
			$has_multi = $this->loadProfile($this->uid);
		}
		return $has_multi;
	}



	public function profileLoad($uid){
		$this->user_pro = profile2_load_by_user($uid, $type_name = NULL);
		return $this->user_pro;
	}


	/*
  *
  *Loads the profile data for users
  *
  */
	public function loadProfile($uid = NULL){
		$uid = $uid = NULL ? $this->uid : $uid;
		$auth = FALSE;
		$profile_load = $this->profileLoad($uid);
		if($profile_load){
			$profile = $profile_load;
			if($profile['customer']){
			$accounts = $profile['customer']->field_cust_account;
			foreach($profile_load as $key => $value){
				$service = !empty($value->field_cust_service_type['und']) ? $value->field_cust_service_type['und'] : FALSE;
				if($service){
					foreach($service as $delta => $service){
						switch($service['value']){
						case'cam':
							$this->has_dvr = TRUE;
							break;
						case'alarm':
							$this->has_alarm = TRUE;
							break;
						}
					}
				}
			}
			$auth = TRUE;
		}
	}
		return $auth;
	}

}// end class




class FortifiedAuthenticate extends dashboard{

	//$user_profile = profile2_load_by_user($uid, $type_name = NULL);
	public function __construct($uid){
		$this->profileLoad($uid);
	}

	public function serviceType($arg){
		$value = FALSE;
		if(!empty($this->user_pro['customer']->field_cust_service_type)){
			$service = $this->user_pro['customer']->field_cust_service_type['und'];
			foreach($service as $key => $values){
				if($values['value'] == $arg){
					$value = TRUE;
				}
			}
		}
		return $value;
	}

	public function alarmSettings($arg){
		$profile = $this->user_pro;
		$access = FALSE;
		$get_alarm_settings = $profile['customer']->field_cust_alarm_settings;
		if(!empty($get_alarm_settings['und'])){
			foreach($get_alarm_settings['und'] as $key => $value){
				if($value['value'] == $arg){
					$access = TRUE;
				}
			}
		}
		return $access;
	}


}







class FortifiedDvrs{

	public $has_dvr = FALSE;
	public $has_tours = FALSE;
	public function queryDvrs($uid){
		$DvrData = FALSE;
		$this->query = new EntityFieldQuery;
		$this->query->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'dvr')
		->fieldCondition('field_alarm_customer', 'target_id', $uid, '=');
		$result = $this->query->execute();
		if(!empty($result['node'])){
			$results = $result['node'];
			$DvrData = array();
			foreach($results as $key => $data){
				$nodes = node_load($data->nid);
				$DvrData[$key] = new stdClass();
				foreach($nodes as $nid => $values){
					switch($nid){
					case'title':
						$DvrData[$key]->dvr_title = !empty($values) ? $values : NULL;
						break;
					case'field_cust_dvr_url':
						$DvrData[$key]->dvr_url = !empty($values['und'][0]['value']) ? $values['und'][0]['value'] : NULL;
						$this->has_dvr = !empty($DvrData[$key]->dvr_url) ? TRUE : FALSE;
						break;
					case'field_cust_virtual_tours':
						$DvrDate[$key]->dvr_tours = !empty($values['und'][0]['value']) ? $values['und'][0]['value'] : NULL;
						$this->has_tours = !empty($DvrDate[$key]->dvr_tours) ? TRUE : FALSE;
						break;
					case'field_fr_vt_tour_times':
						$DvrData[$key]->dvr_tour_times = !empty($values['und'][0]) ? $values['und'][0] : NULL;
						break;
					}
				}
			}
		}
		$this->dvr_data = $DvrData;
		return $DvrData;
	}

}





/*
 *
 * @ Hook_page_alter
 *
 */
class dashPage extends dashboard{

	function __construct(){
		global $user;
		$user->name = !empty($user->name) ? $user->name : '';
		$this->user = $user;
		$args = array(
			'uid' => $user->uid,
			'name' => $user->name,
			'roles' => $user->roles,
		);
		$this->constructDash($args);
		$this->loadProfile($user->uid);
		$args = arg();
		if(!empty($args)){
			foreach($args as $key => $arg){
				$this->arg[] = arg($key);
			}

			$this->requestedCustCam = FALSE;
			$this->is_authenticated = FALSE;
			$this->custDataModal = FALSE;
			$this->hasHelpModals = FALSE;
			$this->modal = array();
			$this->has_tours = FALSE;
			$this->joyRide = FALSE;
			$this->has_account = !empty($this->user_pro) ? TRUE : FALSE;
			$this->requested_dvr = FALSE;
			$this->requestedAlarm = FALSE;
			$this->alarmModal = FALSE;
		}
	}



	/*
	 *
	 * @ Load the page into an object
	 *
	 */
	public function loadPage($page){
		$this->page = $page;
	}



	public function customerDvrs($uid = NULL){
		$dvrs = new FortifiedDvrs();
		$get_dvrs = $dvrs->queryDvrs($uid);
		$this->dvr_data = $get_dvrs;
		return $get_dvrs;
	}


	/*
	 *
	 * @ Load current users profil info
	 *
	 */
	public function profileInfo($modals){
		$user_pro = $this->user_pro;
		if($user_pro['customer']->field_cust_service_type){
			for($i = 0; $i<=count($user_pro['customer']->field_cust_service_type['und']) - 1; $i++){
				$this->service_type[] = $user_pro['customer']->field_cust_service_type['und'][$i]['value'];
			}
			foreach($this->service_type as $key => $type){
				switch($type){
				case'cam':
					$dvr_data = $this->customerDvrs($this->uid);
					if($modals && !empty($dvr_data)){
						$this->dvrModal = TRUE;
					}
					break;
				case'alarm':
					$this->has_alarm = TRUE;
					if($this->has_alarm == TRUE){
						$processing = fr_user_dash_query_customer_variables($this->uid);
						if(!empty($processing['processing'])){
							$this->buildProcessingModal();
						}
					}
					if($modals == TRUE){
						$this->alarmModal = $this->buildAlarmModal();
					}
					break;
				}
			}
		}
		if($modals){
			$this->buildHelpModal(); // not active ( not current using this )
			$this->buildPrefrences(); // prefrences modal
		}

	}
	
	
	private function buildProcessingModal(){
		$content = array();
		$content['markup'] = array(
			'#type' => 'markup',
			'#markup' => '<div class="close-reveal-modal close-modal">&#215;</div><div class="processing-modal"></div>',
			'#prefix' => '<div id="processingModal" class="reveal-modal xlarge">',
			'#suffix' => '</div>',
		);

		$this->page['modal']['processing'] = $content;
	}


	private function buildPrefrences(){
		$content = array();
		$content['markup'] = array(
			'#type' => 'markup',
			'#markup' => '<div class="close-reveal-modal close-modal">&#215;</div><br/><div>'.drupal_render(drupal_get_form('fr_user_dash_form')).'</div>',
			'#prefix' => '<div id="myPrefrences" class="reveal-modal xlarge">',
			'#suffix' => '</div>',
		);

		$this->page['modal']['prefrences'] = $content;
		//}
	}




	/*
	 *
	 * @ Build the help Modal
	 *
	 */
	private function buildHelpModal(){

		if($this->has_dvr == TRUE && $this->has_tours == TRUE){
			$this->hasHelpModals = TRUE;
			$type = 'tours';
			$help_text = variable_get('tours_text', '');
			$this->helpModals($type, $help_text['value']);
		}

	}




	/*
	 *
	 * @ Build the help Modal
	 *
	 */
	private function helpModals($type, $text){
		$content = array();

		$content['wrapper'] = array(
			'#type' => 'container',
			'#attributes'=> array(
				'class' => array('dash-block-wrapper'),
			),
		);

		/*$content['wrapper']['help_text'] = array(
					'#type' => 'markup',
					'#markup' => '<div class="close-reveal-modal close-modal">&#215;</div><div class="help-modal-text">'.$text.'</div>',
					'#prefix' => '<div id="adminHelpModal" class="help-modals">',
					'#suffix' => '</div>',
				);*/

		$this->page['modal'][$type] = $content;
	}





	/*
	 *
	 * @ Build the dvr Modal
	 *
	 */
	private function buildDvrModal($data, $id){
		$dvrModal = array();
		if(!empty($data) && $this->requested_dvr == TRUE){
			foreach($data as $nid => $dvr){
				switch($nid){
				case $id:
					$dvrModal[$nid] = array(
						'#type' => 'markup',
						'#markup' => '<div class="close-reveal-modal close-modal">&#215;</div>
        				<iframe id="webclientDvr" seamless width="100%" height="700px" src="http://'.$dvr->dvr_url.'">
        				</iframe>',
						'#prefix' => '<div id="myDvrModal" class="reveal-modal xlarge">',
						'#suffix' => '</div>',
					);
					break;
				}
			}
		}
		$this->dvrModal = $dvrModal;
	}




	/*
	 * @ Load the requested cameras from admin
	 */
	public function requestCameras($nid){
		if($this->has_dvr == TRUE){
			$this->requested_dvr = TRUE;
			$this->requested_dvr_nid = $nid;
			$this->buildDvrModal($this->dvr_data, $nid);
		}
	}




	/*
	 *
	 * @ Build the alarm modal
	 *
	 */
	public function buildAlarmModal(){
		$alarmModal = array(
			'#type' => 'markup',
			'#markup' => '<div class="close-reveal-modal close-modal">&#215;</div><div class="alarm-modal">
				Having issues logging in or navigating?<a href="https://fortifiedss.alarmdealer.com/index.php?mod=auth&action=login"> Click here.</a></div>',
			'#prefix' => '<div id="myAlarmModal" class="reveal-modal xlarge">',
			'#suffix' => '</div>',
		);
		$this->alarmModal = $alarmModal;
		return $alarmModal;
	}




	/*
	 *
	 * @ Build the camaer modal for admin customer
	 *
	 */
	public function requestCustCameras($info){
		$roles = $this->user_roles;
		if(!in_array('anonymous user', $roles)){
			$uid = $info['customers'];
			$dvr = $info['dvr'];

			$this->cust_dvr = array(
				'#type' => 'markup',
				'#markup' => '<div class="close-reveal-modal close-modal">&#215;</div>
					<iframe id="webclientDvr" style="border:2px solid white;" seamless scroll="yes" width="100%" height="700px" src="http://'.$dvr.'">
					</iframe>',
				'#prefix' => '<div id="'.$uid.'" class="reveal-modal xlarge">',
				'#suffix' => '</div>',
			);
			$this->requestedCustCam = TRUE;
			$this->is_authenticated = TRUE;
			$this->modal_id = array(
				'#type' => 'markup',
				'#markup' => '<input type="hidden" id="custCam" value="'.$uid.'"/>',
			);
			$this->page['modal']['id'] = $this->modal_id;
		}

	}



	/*
	 *
	 * @ Add all needed js files for each function
	 *
	 */
	public function finishAllModals(){
		$this->addModalToPage();
		$this->attatchJsToPage();
	}




	/*
	 *
	 * @ Add all needed js files for each function
	 *
	 */
	private function attatchJsToPage(){
		if(!empty($this->has_dvr) && $this->has_dvr == TRUE){
			drupal_add_js(drupal_get_path('module', 'fr_user_dash') .'/js/fr_user_dash_reveal.js', array('type' => 'file', 'scope' => 'header'));
		}
		if(!empty($this->requestedCustCam) && $this->requestedCustCam == TRUE){
			drupal_add_js(drupal_get_path('module', 'fr_user_dash') .'/js/fr_user_dash_reveal_cust.js', array('type' => 'file', 'scope' => 'footer'));

		}
		if(!empty($this->requestTour) && $this->requestTour == TRUE){
			drupal_add_js(drupal_get_path('module', 'fr_user_dash') . '/js/fr_user_dash_files.js', array('weight' => 1));
		}
		if(!empty($this->viewNodeAcess) && $this->viewNodeAcess == TRUE){
			drupal_add_js(drupal_get_path('module', 'fr_upload') .'/fr_upload.js', array('type' => 'file', 'scope' => 'footer'));
		}
		if($this->has_alarm == TRUE){
			//drupal_add_js(drupal_get_path('module', 'ip_datatel') .'/js/ip_datatel_login.js', array('type' => 'file', 'scope' => 'header'));
		}
	}




	/*
	 *
	 * @ Add all the modals to the page
	 *
	 */
	private function addModalToPage(){
		if(!empty($this->has_alarm) && $this->has_alarm == TRUE){
			$this->page['modal']['alarm'] = $this->alarmModal;
		}
		if(!empty($this->has_dvr) && $this->has_dvr == TRUE && $this->requested_dvr == TRUE){
			$this->page['modal']['dvr'] = $this->dvrModal;
		}
		if(!empty($this->viewNodeAcess) && $this->viewNodeAcess == TRUE){
			$this->page['modal']['vt'] = $this->node_output;
		}
		if(!empty($this->is_authenticated) && $this->is_authenticated == TRUE){
			$this->page['modal']['cust_dvr'] = $this->cust_dvr;
		}
		if(!empty($this->help_modal)){
			$this->page['modal']['help_modal'] = $this->help_modal;
		}
		if($this->custDataModal == TRUE){
			$this->page['modal']['cust_data'] = array(
				'#type' => 'markup',
				'#markup' => '<div class="close-reveal-modal close-modal">&#215;</div><div class="custData">replace  ME !</div>',
				'#prefix' => '<div id="custDataModal" class="reveal-modal xlarge">',
				'#suffix' => '</div>',
			);
		}
	}





	/*
	 *
	 * @ Add all the global js files to the page
	 *
	 */
	public function globalJsFiles(){
		drupal_add_js(drupal_get_path('module', 'fr_user_dash') .'/js/fr_user_dash.js', array('type' => 'file', 'scope' => 'footer'));
		drupal_add_js(drupal_get_path('module', 'fr_user_dash') .'/js/fr_user_dash_download.js', array('type' => 'file', 'scope' => 'footer'));
		drupal_add_js(drupal_get_path('module', 'fr_user_dash') .'/js/fr_background.js', array('type' => 'file', 'scope' => 'footer'));
	}




	/*
	 *
	 * @ Add all the global js files to the admin pages
	 *
	 */

	public function addDashFiles(){
		drupal_add_js(drupal_get_path('module', 'fr_user_dash') .'/js/fr_user_dash_view_actions.js', array('type' => 'file', 'scope' => 'header', 'weight' => -100));
		drupal_add_js(drupal_get_path('module', 'fr_user_dash') .'/js/fr_user_dash_dragndrop.js', array('type' => 'file', 'scope' => 'footer'));
		drupal_add_js(drupal_get_path('module', 'fr_user_dash') .'/js/fr_user_dash_popup.js', array('type' => 'file', 'scope' => 'footer'));
		if($this->joyRide == TRUE){
			drupal_add_js(drupal_get_path('module', 'fr_user_dash') .'/js/fr_user_dash_joyride.js', array('type' => 'file', 'scope' => 'footer'));
			$this->addJoyRide();
		}
	}




	/*
	 *
	 * @ Add Joy Ride Html
	 *
	 */

	public function addJoyRide(){
		$content = array();
		$admins = array(
			'sixth_stop',
			'seventh_stop',
			'eighth_stop',
		);
		$customers = array(
			"first_stop",
			'prefrences',
			'cameras',
			'alarm',
			'sec_stop',
			"second_stop",
			'third_stop',
			'fourth_stop',
			'fifth_stop',
		);
		if(in_array('Customer', array_values($this->user->roles))){
			$vars = $customers;
		}else{
			$vars = $admins;
		}
		foreach($vars as $key => $var){
			$variable = variable_get($var, '');
			if(!empty($variable['value'])){
				$items[$key] = array(
					'data' => $variable['value'],
					'data-id' => $var,
					'data-text' => 'Next',
				);
			}
		}

		$content['joy_wrapper'] = array(
			'#theme' => 'item_list',
			'#items' => $items,
			'#attributes' => array(
				'class' => array('joyride-list'),
				'data-joyride' => '',
			),
		);
		$this->page['modal']['joyride'] = $content;

	}




	/*
	 *
	 * @ Add all the requested js files to the page
	 *
	 */
	public function loadFileJs($info){
		$nid = $info['nid'];
		$this->requestTour = TRUE;
		//load the users tours
		$this->loadNode($nid);
		$get_render = $this->node_output;
		if($get_render == FALSE) {
			$this->viewNodeAccess = FALSE;
		}else{
			$this->viewNodeAccess = TRUE;
		}
	}




	/*
	 *
	 * @ Load the requested node
	 *
	 */
	private function loadNode($nid){
		$user = $this->user;
		$node = node_load($nid);
		$cust_uid = $node->field_vt_customer['und'][0]['target_id'];

		if($user->uid == 1 || $cust_uid == $user->uid){
			$view_vt = node_view($node, $view_mode = 'full', $langcode = NULL);
			$this->node_output = array(
				'#type' => 'markup',
				'#markup' => '<div id="myVtModal" class="reveal-modal xlarge">
	  	<div class="close-reveal-modal close-modal">&#215;</div>
	  	<div class="manage-vt-buttons"><a class="lead button radius small" href="../../node/'.$nid.'/edit">Edit</a>
	  	<a class="lead button radius small" href="../../node/'.$nid.'/delete">Delete</a></div>
	  	<div class="vt-tour-revealed">'.drupal_render($view_vt).'</div></div>');
		}
	}


	public function redirect($get){
		if(!empty($get[1]) && $get[1] != 'password'){
			if(empty($get[2])){
				if(!empty($get[0]) && $get[0] == 'user'){
					if(!empty($get[1]) && $get[1] == $this->user->uid){
						$uid = $this->user->uid;
						$path = 'user/'.$uid.'/dashboard';
						$options = array('');
						$http_response_code = 302;
						drupal_goto($path, $options, $http_response_code);
					}
				}
			}
		}
	}



}// end class



function fr_user_dash_page_alter(&$page){

	$dash = new dashPage;
	$dash->loadPage($page);

	$user = $dash->user;
	$user_pro = $dash->user_pro;
	if(!empty($dash->arg[1]) && $dash->arg[1] == $dash->user->uid){
		if($user_pro){
			$dash->globalJsFiles();
			$modals = TRUE;
			$dash->profileInfo($modals);
		}
		if(!empty($dash->arg[0]) && !empty($dash->arg[2]) && $dash->arg[2] == 'dashboard' && $dash->arg[0] == 'user'){
			$dash->addDashFiles();
			$dash->hasHelpModals = TRUE;
			$customer_variables = fr_user_dash_query_customer_variables($user->uid);
			$joyride = isset($customer_variables['help']) ? $customer_variables['help'] : 0;
			if($dash->user->access != 0){
				if($joyride == 1){
					$dash->joyRide = TRUE;
				}
				$dash->addDashFiles();
			}
		}
		$access = array('administrator', 'editor', 'supervisor');

		if(array_intersect($access, $dash->user_roles)){
			$dash->custDataModal = TRUE;
		}
		if(isset($_GET['alarm'])){
			$dash->requestedAlarm = TRUE;
			$dash->buildAlarmModal();
		}


		if(isset($_GET['cameras'])){
			$dash->requestCameras($_GET['cameras']);
		}

		if(isset($_GET['customers'])){
			$dash->requestCustCameras($_GET);
		}
		if(isset($_GET['nid'])){
			$dash->loadFileJs($_GET);
		}

		if(isset($_GET['download'])){
			$nid = $_GET['nid'];
			$dash->requestDownload($nid);
		}
		//add all the modals and js files to the page last
		$dash->finishAllModals();
		$page = $dash->page;
	}
	if($dash->arg[0] == 'user'){
		$dash->redirect(arg());
	}
	//dpm($dash->user);
	return $page;
}







class getRequest{

	public function loadUser(){
		global $user;
		$this->user = $user->uid;
	}

	public function requestDownload($nid){

		if(!empty($nid)){
			$node = node_load($nid);
			if(!empty($node)){

				$this->customer = $node->field_vt_customer['und'][0]['target_id'];
				if($this->customer == $this->user){
					$get_files = explode(',', $node->field_vt_tour_files['und'][0]['upload_type']);
					if(in_array('video', $get_files)){
						$videos = $node->field_vt_tour_files['und'][0]['video_files'];
						$get_videos = explode(',', $videos);
						foreach($get_videos as $key => $video){
							$link = $this->downloadVideo($video);
							$this->status[] = $link;
						}
						return $link;
					}
				}
			}
		}
	}

	private function downloadVideo($video_fid){
		$load_file = file_load($video_fid);
		$file_name = $load_file->filename;
		$stream = file_create_url($load_file->uri);
		$options = array();
		return $stream;
	}

	public function getView($uid, $type){
		$results = $this->queryData($uid, $type);
		$pageModal['html'] = drupal_render($results);
		return $pageModal;
	}


	private function queryData($uid, $type){
		$query = new EntityFieldQuery;
		$query->entityCondition('entity_type', 'node')
		->entityCondition('bundle', $type)
		->fieldCondition('field_vt_customer', 'target_id', $uid, '=')
		->propertyCondition('status', 1)
		->propertyOrderBy('created', 'DESC')
		->range(0, 10);
		$result = $query->execute();
		//dpm($result);
		$data = array();
		$headers = array(
			'Title',
			'ID',
			'Date',
			'Edit',
			'Manage Files',
			'Preview',
		);
		if(!empty($result['node'])){
			$rows = array();
			foreach($result['node'] as $key => $values){
				$value = node_load($values->nid);
				$rows[] = array(
					'data' => array(
						array(
							'data' => '<a href="../../node/'.$value->nid.'">'.$value->title.'</a>',
							'style' => array(''),
							'class' => array(''),
						),
						array(
							'data' => $value->nid,
							'style' => array(''),
							'class' => array(''),
						),
						array(
							'data' => date('Y-m-d g:i a', $value->created),
							'style' => array(''),
							'class' => array(''),
						),
						array(
							'data' => '<a href="../../node/'.$value->nid.'/edit">Edit</a>',
							'style' => array(''),
							'class' => array(''),
						),
						array(
							'data' => '<a href="../../file-browse/file/'.$value->nid.'">Manage Files</a>',
							'style' => array(''),
							'class' => array(''),
						),
						array(
							'data' => '<input type="button" class="preview-cust-data button radius small" value="Preview" cust-nid="'.$value->nid.'"/>',
							'style' => array(''),
							'class' => array(''),
						),
					),
				);

			}
		}


		$data['virtual_tours'] = array(
			'#type' => 'container',
			'#attributes' => array(
				'class' => array('cust-data-wrapper'),
			),
		);

		$data['virtual_tours']['table'] = array(
			'#theme' => 'table',
			'#header' => $headers,
			'#rows' => $rows,
			'#empty' => t('Sorry No Data For This Customer'),
			'#group' => 'wrapper',
			'#attributes' => array(
				'class' => array('cust-data-table', 'large-6', 'collumns'),
			),
		);
		$data['virtual_tours']['preview'] = array(
			'#type' => 'markup',
			'#markup' => '',
			'#prefix' => '<div id="preview-cust-data" class="large-12 columns">',
			'#suffix' => '</div>',
		);
		return $data;

	}




	public function saveFiles($nid){
		$load = node_load($nid);
		$save = $load->field_vt_tour_saved_status;
		if(empty($load->field_vt_tour_saved_status['und'][0]['value'])){
			$load->field_vt_tour_saved_status['und'][0]['value'] = TRUE;
		}else{
			$load->field_vt_tour_saved_status['und'][0]['value'] = TRUE;
		}
		$done = node_save($load);
		if($done){
			$status = array('status' => 0);
		}else{
			$status = array('status' => 1);
		}
		return $status;
	}

}





function fr_user_dash_menu() {
	// Ajax Callback. Returns telephone number for current region.
	$items['fr_user_delete'] = array(
		'access callback' => TRUE,
		'page callback' => 'fr_user_dash_delete_callback',
		'type' => MENU_CALLBACK
	);
	$items['fr_user_download'] = array(
		'access callback' => TRUE,
		'page callback' => 'fr_user_dash_download_callback',
		'type' => MENU_CALLBACK
	);
	$items['fr_user_data'] = array(
		'access callback' => TRUE,
		'page callback' => 'fr_user_dash_data_callback',
		'type' => MENU_CALLBACK
	);
	$items['fr_save_files'] = array(
		'access callback' => TRUE,
		'page callback' => 'fr_user_dash_save_callback',
		'type' => MENU_CALLBACK
	);
	$items['fr_user_dash_form'] = array(
		'title' => '',
		'page callback' => 'fr_user_dash_form_submit',
		'page arguments' => array('fr_user_dash_form'),
	);
	$items['fr_preview_cust_data'] = array(
		'access callback' => TRUE,
		'page callback' => 'fr_preview_cust_data',
		'type' => MENU_CALLBACK
	);

	return $items;
}


function fr_preview_cust_data(){
	$nid = $_POST['cust_nid'];
	$node = node_load($nid);
	$view_node = drupal_render(node_view($node, $view_mode = 'full'));
	$return_data = array('node_data' => $view_node);
	drupal_json_output($return_data);
	drupal_exit();
}




function fr_user_dash_save_callback(){
	$nid = $_POST['files'];
	//dpm($_POST);
	$getRequest = new getRequest;
	$view = $getRequest->saveFiles($nid);
	drupal_json_output($view);
	drupal_exit();
}




function fr_user_dash_data_callback(){
	$uid = $_POST['uids'];
	$type = $_POST['types'];
	//dpm($_POST);
	$getRequest = new getRequest;
	$view = $getRequest->getView($uid, $type);
	drupal_json_output($view);
	drupal_exit();
}






function fr_user_dash_download_callback(){
	$nid = $_POST['nids'];
	$getRequest = new getRequest;
	$getRequest->loadUser();
	$link = $getRequest->requestDownload($nid);
	if(!empty($getRequest->status)){
		$status = $getRequest->status;
		drupal_json_output($getRequest->status);
		drupal_exit();
	}
}






function fr_user_dash_delete_callback() {
	$nids = $_POST;
	$i = 0;
	if(is_array($nids) && !empty($nids)){
		foreach($nids['nids'] as $key => $node){
			if(!empty($node) && $node != 0){
				$delete = node_delete($node);
				if(!node_load($node)){
					$i++;
				}else{
					$errors[] = 1;
				}
			}
		}
	}
	$return = empty($errors) ? 'Successfully Deleted '.$i.' items.' : 'Failed to delete items!';
	$output = array('status' => $return);

	drupal_json_output($output);

	//return if this operatio nwas successfull
	drupal_exit();
}







/*
*
* Genderate the menu
*
*/
function _fr_menu_generate_list ($list_items) {

	$list = array();
	$options = array();
	$link = !empty($list_item->path) ? $list_item->path : '';

	$options['query'] = !empty($list_item['query']) ? $list_item['query'] : array('');
	$options['html'] = TRUE;

	$list['cameras'] = fr_user_dash_fieldset('Camera Details', array('user-cameras-wrapper', 'large-12', 'columns'));
	$list['buttons'] = fr_user_dash_fieldset('Settings', array('user-button-wrapper', 'large-12', 'columns'));

	foreach ($list_items as $delta => $items) {
		foreach($items as $key => $delt){
			foreach($delt as $num => $list_item){
				$type = $list_item->type;
				switch($list_item->type){
				case'cam':
					$options = array(
						'attributes' => array(
							'class' => array('user-dash-button'),
							'data-reveal' => $list_item->id,
						),
						'query' => $list_item->query,
						'html' => TRUE,
					);
					$list['cameras']['cam_'.$num] = fr_user_dash_fieldset($list_item->title, array('user-cameras-fieldset', 'large-6', 'columns', 'collapsible', 'collapsed'));
					$data = '<div class="dvr-data"><label>Remote Login:</label></div><div class="button star">'.l($list_item->title, $list_item->path, $options).'</div>';
					$data .= !empty($list_item->tours) ? '<div class="dvr-data"><label>Virtual Tours:</label><div>'.$list_item->tours.'</div></div>' : '';
					$data .= !empty($list_item->tour_times) ? '<div class="dvr-data"><label>Tour Times:</label><div>'.$list_item->tour_times.'</div></div>' : '';
					$data .= !empty($list_item->tour_days) ? '<div class="dvr-data"><label>Tour Days:</label><div>'.$list_item->tour_days.'</div></div>' : '';
					$list['cameras']['cam_'.$num]['camera'.$num] = fr_user_dash_markup($data, 'camera large-12 columns');
					break;
				case'alarm':
					//$path = '<a href="'.$list_item->path.'" class="user-dash-button" id="alarm" data-reveal='.$list_item->id.' >'.$list_item->title.'</a>';
					break;
				case'help':
					//$path = '<a href="'.$list_item->path.'" class="user-dash-button" data-reveal-id="'.$list_item->id.'" >'.$list_item->title.'</a>';
					break;
				case'prefrences':
					$path = '<a href="'.$list_item->path.'" class="user-dash-button" id="prefrences" data-reveal-id="'.$list_item->id.'" >'.$list_item->title.'</a>';
					$list['buttons']['prefrences'] = fr_user_dash_markup($path, 'button edit');
					break;
				case'account':
					$path = '<a href="'.$list_item->path.'" class="user-dash-button" id="account">'.$list_item->title.'</a>';
					$list['buttons']['account'] = fr_user_dash_markup($path, 'button edit');
					break;
				}
			}

		}
	}
	return $list;
}


function fr_user_dash_fieldset($title, $class){
	if($title == 'container'){
		return array(
			'#type' => 'container',
			'#attributes' => array(
				'class' => $class,
			),
		);
	}else{
		return array(
			'#type' => 'fieldset',
			'#title' => t($title),
			'#collapsed' => TRUE,
			'#collapsible' => TRUE,
			'#attributes' => array(
				'class' => $class,
			),
		);
	}
}

function fr_user_dash_markup($markup, $class){
	return array(
		'#type' => 'markup',
		'#markup' => $markup,
		'#prefix' => '<div class="'.$class.'">',
		'#suffix' => '</div>',
	);
}




function fr_user_dash_build_dash(){

	$dash = new dashPage;
	$user = $dash->user;
	$user_pro = $dash->user_pro;
	$items = array();

	if($user_pro){
		// load this users profile info
		$modals = FALSE;
		$dash->profileInfo($modals);
		if(!empty($dash->service_type)){
			$service_type = $dash->service_type;
			foreach($service_type as $key => $type){
				switch($type){
				case'cam':
					if(!empty($dash->dvr_data)){
						foreach($dash->dvr_data as $nid => $data){
							$items['cam'][$key][$nid] = new stdClass();
							$items['cam'][$key][$nid]->type = 'cam';
							$items['cam'][$key][$nid]->title = t($data->dvr_title);
							$items['cam'][$key][$nid]->path = 'http://'.$_SERVER['HTTP_HOST'].''.$_SERVER['REQUEST_URI'].'';
							$items['cam'][$key][$nid]->query = array('cameras' => $nid);
							$items['cam'][$key][$nid]->tours = !empty($data->dvr_tour_times) && $data->dvr_tour_times == 'yes'  ? 'Yes' : 'No';
							$items['cam'][$key][$nid]->tour_times = !empty($data->dvr_tour_times['tour_time']) ? str_replace(',', ' - ', $data->dvr_tour_times['tour_time']):NULL;
							$items['cam'][$key][$nid]->tour_days = !empty($data->dvr_tour_times['tour_time_days']) ? 'Everyday' : NULL;
							$items['cam'][$key][$nid]->Class = array('button radius small user_cameras reveal-link');
							$items['cam'][$key][$nid]->id = 'myDvrModal';
						}
					}
					break;
				case'alarm':
					/*$items['alarm'][$key][0] = new stdClass();
	            $items['alarm'][$key][0]->type = 'alarm';
	            $items['alarm'][$key][0]->title = t("My Virtual Alarm");
	            $items['alarm'][$key][0]->path = ''.$_SERVER['REQUEST_URI'].'#';
	            $items['alarm'][$key][0]->query = '';
	            $items['alarm'][$key][0]->Class = array('button radius small revealMyAlarmModal');
	            $items['alarm'][$key][0]->id = 'myAlarmModal';*/
					break;
				}
			}
		}
		$key = empty($key) ? 0 : $key;
		$uid = $dash->user->uid;
		$items['account'][$key][0] = new stdClass();
		$items['account'][$key][0]->type = 'account';
		$items['account'][$key][0]->title = t("Edit My Account");
		$items['account'][$key][0]->path = 'edit';
		$items['account'][$key][0]->query = '';
		$items['account'][$key][0]->Class = array('button radius small');
		$items['account'][$key][0]->id = '';

		$items['prefrences'][$key][0] = new stdClass();
		$items['prefrences'][$key][0]->type = 'prefrences';
		$items['prefrences'][$key][0]->title = t("My Prefrences");
		$items['prefrences'][$key][0]->path = 'prefrences';
		$items['prefrences'][$key][0]->query = '';
		$items['prefrences'][$key][0]->Class = array('button radius small');
		$items['prefrences'][$key][0]->id = 'myPrefrences';


		$menu_list = _fr_menu_generate_list($items);
		/*$menu = array(
      '#theme' => 'item_list',
      '#items' => $menu_list,
      //'#title' => t('Sign Up Today'),
      '#type' => 'ul',
      '#attributes' => array('id' => 'navigation'),
      '#container_id' => '',
      '#prefix' => '<section>',
      '#suffix' => '</section>',
    );*/
		$menu = array();
		$menu['wrapper'] = array(
			'#type' => 'container',
			'#attributes' => array(
				'id' => 'navigation',
				'class' => array(''),
			),
		);
		$menu['wrapper']['user_menu'] = $menu_list;
		//dpm(render($menu));
		return $menu;
	}
}


/*
 * Implements hook_views_api().
 */
function fr_user_dash_views_api() {
	return array(
		'api' => 3,
		'path' => drupal_get_path('module', 'fr_user_dash'),
		'template path' => drupal_get_path('module', 'fr_user_dash'),
	);
}


function fr_user_dash_views_pre_render(&$view){
	switch($view->name){
	case'tours_today':
		$dupes = array();
		$times = array();
		if(!empty($view->result)){
			foreach($view->result as $key => $value){
				$pid = $value->pid;
				$dupes[$pid] = $value;
			}


		}
		break;
	}
	return $view;
}


function _load_account_information($uid){
	$ipdatatel = new ipDatatel();
	$account_info = $ipdatatel->loadAccountInformation($uid);
	return $account_info;
}



function fr_user_dash_form($node, &$form_state){
	$customer = new dashPage();
	$uid = $customer->user->uid;
	$modals = FALSE;
	$customer->profileInfo($modals);
	$cameras = FALSE;
	$alarm = FALSE;
	$has_tours = FALSE;
	$form_state['custom_vars'] = array();
	$form_state['custom_vars']['has_tours'] = FALSE;
	$form_state['custom_vars']['has_alarms'] = FALSE;
	$form_state['custom_vars']['account_name'] = $customer->name;
	$service_type = !empty($customer->service_type) ? $customer->service_type : NULL;
	
	$role = !in_array('administrator', $customer->user->roles) || !in_array('supervisor', $customer->user->roles) ? 'user' : 'admin';

	$form_state['custom_vars']['role'] = $role;
	if(!empty($service_type)){
		foreach($service_type as $key => $value){
			if($value == 'cam'){
				$cameras = TRUE;
				if($customer->has_tours == TRUE){
					$has_tours = TRUE;
					$form_state['custom_vars']['has_tours'] = TRUE;
				}
			}
			if($value == 'alarm'){
				$alarm = TRUE;
				$form_state['custom_vars']['has_alarms'] = TRUE;
			}
		}
	}

	$form['wrapper'] = array(
		'#type' => 'vertical_tabs',
	);
	
	$customer_variables = fr_user_dash_query_customer_variables($uid);
	$data = isset($customer_variables) && !empty($customer_variables) ? $customer_variables : array();
	//dpm($data);
	if($role == 'admin'){
		$default_proc_val = !empty($data['processing'][$customer->name]['status']) ? $data['processing'][$customer->name]['status'] : 0;
		$form['alarm_wrapper'] = array(
				'#type' => 'fieldset',
				'#title' => t('Alarm Processing'),
				'#collapsible' => FALSE,
				'#group' => 'wrapper',
				'#attributes' => array(
					'class' => array('large-10', 'columns'),
				),
			);
			$form['alarm_wrapper']['processing'] = array(
					'#type' => 'radios',
					'#title' => t('Alarm Processing'),
					'#group' => 'wrapper',
					'#default_value' => $default_proc_val,
					'#options' => array(
						1 => 'Turn Processing on',
						0 => 'Turn Processing off',
				),
			);
	}
	
	if($alarm && $role != 'admin'){
		$form_state['custom_vars']['processing'] = array();
		$set_permissions = array(
			'permissions' => 'process_alarms',
		);
		$alarm_processing = ip_datatel_check_processing_permissions($uid, $role, $set_permissions);
		if($alarm_processing){
			$form['alarm_wrapper'] = array(
				'#type' => 'fieldset',
				'#title' => t('Alarm Processing'),
				'#collapsible' => FALSE,
				'#group' => 'wrapper',
				'#attributes' => array(
					'class' => array('large-10', 'columns'),
				),
			);
			foreach($alarm_processing as $bat_name => $value){
				if(!empty($data)){
				$defaults_processing = isset($data['processing'][$bat_name]['status']) ?  $data['processing'][$bat_name]['status'] : 0;
				}else{
					$defaults_processing = 0;
				}
				if(!empty($form_state['values'])){
					$value = $form_state['values'][$bat_name];
					
				}
				$form_state['custom_vars']['processing'][$bat_name] = $bat_name;
				$form['alarm_wrapper'][$bat_name] = array(
					'#type' => 'radios',
					'#title' => t($bat_name),
					'#group' => 'wrapper',
					'#default_value' => $defaults_processing,
					'#options' => array(
						1 => 'Turn Processing on',
						0 => 'Turn Processing off',
				),
			);
			}
		}
	}


	// This is the field fieldset.
	$form['help_joy'] = array(
		'#type' => 'fieldset',
		'#title' => t('Help'),
		'#collapsible' => FALSE,
		'#description' => t('Help'),
		'#group' => 'wrapper',
		'#attributes' => array(
			'class' => array('large-10', 'columns'),
		),
	);

	$form['uid'] = array(
		'#type' => 'hidden',
		'#title' => t('UID'),
		'#default_value' => $uid,
		'#group' => 'wrapper',
	);

	$defaults['help'] = isset($data['help']) ? $data['help'] : 1;
	$form['help_joy']['help_on_off'] = array(
		'#type' => 'radios',
		'#title' => t('Helper'),
		'#group' => 'wrapper',
		'#default_value' => $defaults['help'],
		'#options' => array(
			1 => 'On',
			0 => 'Off',
		),
	);

	$form['email'] = array(
		'#type' => 'fieldset',
		'#title' => t('Email Prefrences'),
		'#collapsible' => FALSE,
		'#group' => 'wrapper',
		'#attributes' => array(
			'class' => array('large-10', 'columns'),
		),
	);
	$form['email']['email_prefrences'] = array(
		'#type' => 'radios',
		'#title' => t('Emails'),
		'#group' => 'wrapper',
		'#options' => array(
			'1' => 'Turn All Emails Off',
		),
	);
	if($has_tours == TRUE){
		$events = isset($data['tours']['events']) ? $data['tours']['events'] : 1;
		$form['email']['events'] = array(
			'#type' => 'radios',
			'#title' => t('Events'),
			'#group' => 'wrapper',
			'#default_value' => $events,
			'#options' => array(
				'1' => 'Send an email for every Event Report done',
				'0' => 'Do not send emails for Event Reports',
			),
		);
		$incidents = isset( $data['tours']['incidents']) ?  $data['tours']['incidents'] : 1;
		$form['email']['incidents'] = array(
			'#type' => 'radios',
			'#title' => t('Incident Reports'),
			'#group' => 'wrapper',
			'#default_value' => $incidents,
			'#options' => array(
				'1' => 'Send an email for every Incident Report done',
				'0' => 'Do not send emails for Incident Reports',
			),
		);
		$tours = isset( $data['tours']['tours']) ?  $data['tours']['tours'] : 1;
		$form['email']['tours'] = array(
			'#type' => 'radios',
			'#title' => t('Virtual Tours'),
			'#group' => 'wrapper',
			'#default_value' => $tours,
			'#options' => array(
				'1' => 'Send an email for every Virtual Tour done',
				'0' => 'Do not send emails for Virtual Tours',
			),
		);
	}

	$form['bug'] = array(
		'#type' => 'fieldset',
		'#title' => t('Submit A Bug'),
		'#collapsible' => FALSE,
		'#group' => 'wrapper',
		'#attributes' => array(
			'class' => array('large-10', 'columns'),
		),
	);
	$form['bug']['bug_text'] = array(
		'#type' => 'text_format',
		'#title' => t('Submit A Bug'),
		'#group' => 'wrapper',
		'#format' => 'plain_text',
	);

	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Save',
		'#ajax' => array(
			'callback' => 'fr_user_dash_form_submit',
			'wrapper' => 'hr-rsvp-form',
		),
	);
	$form['#prefix'] = '<div id="hr-rsvp-form" class"hr-rsvp-form">';
	$form['#suffix'] = '</div>';


	return $form;
}



function fr_user_dash_query_customer_variables($uid, $delta = 0, $unserialize = TRUE){
	$data = '';
	$customer_variables = db_query('SELECT * FROM {customer_variables} WHERE uid = :uid AND delta = :delta', array(':uid' => $uid, ':delta' => $delta));
			$record = $customer_variables->fetchObject();
			if(!empty($record) && !empty($record->data)){
				if($unserialize){
					$data = unserialize($record->data);
				}else{
					$data = $record;
				}
			}
			return $data;
}


function fr_user_dash_form_submit($form, &$form_state){
	$element = array();
	$uid = $form_state['values']['uid'];
	$customer_variables = fr_user_dash_query_customer_variables($uid);
	$variables = array();
	$variables['help'] = $form_state['values']['help_on_off'];
	$variables['account_name'] = $form_state['custom_vars']['account_name'];
	if(!empty($form_state['custom_vars'])){
		if(!empty($form_state['custom_vars']) && $form_state['custom_vars']['has_tours'] == TRUE){
			$events = $form_state['values']['events'];
			$tours = $form_state['values']['tours'];
			$incidents = $form_state['values']['incidents'];
			$variables['tours'] = array('events' => $events, 'tours' => $tours, 'incidents' => $incidents);
		}
		if(!empty($form_state['custom_vars']['processing'])){
			foreach($form_state['custom_vars']['processing'] as $bat_name => $processing){
				if(isset($form_state['values'][$bat_name])){
					$value = $form_state['values'][$bat_name];
					if($value == 1){
					  $variables['processing'][$bat_name] = array('status' => $value, 'processing_on_time' => strtotime(date('Y-m-d G:i:s')));
					}
				}
			}
		}
	}
		
		if(isset($form_state['values']['processing'])){
			$value = $form_state['values']['processing'];
			if($value == 1){
				$variables['processing'][$form_state['custom_vars']['account_name']] = array('status' => $value, 'processing_on_time' => strtotime(date('Y-m-d G:i:s')));	
			}	
		}
	
	if(!empty($customer_variables)){
		$update_cust_variables = db_update('customer_variables')
			->fields(array(
			'data' => serialize($variables),	
			))
  ->condition('uid', $uid, '=')
  ->condition('delta', 0, '=')
  ->execute();
  $element['message']['#markup'] = "Your preferences have been Updated.";
	}else{
		$insert = db_insert('customer_variables')
			->fields(array(
			'uid' => $uid,
			'data' => serialize($variables),
			'sessions' => '',
			'delta' => 0,
			))
			->execute();
		$element['message']['#markup'] = "Your preferences have been saved.";	
	}
	return $element;
}
