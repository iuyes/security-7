<?php


/**
 * @ Redirect user on login
 */
function fr_user_dash_user_login(&$edit, $account){
	if (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset') {
		_fr_groups_user_redirect($edit, $account);
	}
}




/**
 * @ helper function to redirect users at login
 *
 */
function _fr_groups_user_redirect(&$edit, $user){
	$authenticate = FortifiedAdminAccounts::authenticateAccount($user);
	if(!empty($authenticate['path'])){
		$edit['redirect'] = $authenticate['path'];
	}
}



/**
 * @ Mian redirect function after the user has logged in
 *
 */
function fr_user_dash_account_redirect(){
	global $user;
	$authenticate = FortifiedAdminAccounts::authenticateAccount($user);
	if(!empty($authenticate['path'])){
		drupal_goto($authenticate['path']);
	}else{
		drupal_goto('user');
	}
	return ;
}





/**
 * @ Class for admin and central station dashboards
 *
 */
class FortifiedAdminAccounts extends FortifiedDashboardMarkup{

	public function __construct($uid = NULL, $auth = TRUE, $user = TRUE){
		if($user){
			global $user;
			$this->uid = $user->uid;
			$this->user = $user;
			if($auth = TRUE){
				$this->user_role = $this->Authenticate();
			}
		}
	}

	public function Authenticate(){
		$user = $this->user;
		$authenticate = self::authenticateAccount($user);
		return $authenticate;
	}


/**
 * @ Function for grabbing a users role and path to redirect to
 *
 */
	public static function authenticateAccount($user){
		$uid = $user->uid;
		$redirect = array();
		$roles = array(3 => 'administrator', 4 => 'Customer', 9 => 'Account Manager', 11 => 'central station');
		$authenticate = array_intersect_assoc($roles, $user->roles);
		if(!empty($authenticate) && is_array($authenticate)){
			foreach($authenticate as $role_num => $role_name){
				switch($role_num){
				case 3:
					$path = '../../account/admin/'.$uid.'';
					$redirect['path'] = $path;
					$redirect['role'] = $role_num;
					return $redirect;
					break;
				case 4:
				case 9:
					$path = '../../account/dashboard/'.$uid.'';
					$redirect['path'] = $path;
					$redirect['role'] = $role_num;
					return $redirect;
					break;
				case 11:
					$path = '../../account/central-station/'.$uid.'';
					$redirect['path'] = $path;
					$redirect['role'] = $role_num;
					return $redirect;
					break;
				}
			}
		}else{
			$path = 'user';
			$redirect['path'] = $path;
			$redirect['role'] = 0;
			return $redirect;
		}
	}
	
	

/**
 * @ Function for constructing our custom fieldsets
 *
 */
	public static function dashboardFieldset($title, $class = NULL, $collapsible = TRUE, $status = NULL, $inner_status = FALSE, $iclass = NULL, $subclass = NULL, $weight = 100){
		$subclass = $subclass ? 'account-static-section' : '';
		$collapsible =  $collapsible == TRUE ? 'collapsible' : '';
		$inner_status = $inner_status == FALSE ? 'closed' : ' active open';
		$status = $status == FALSE ? 'closed' : 'static';
		if($inner_status == 'active open' && $status != 'open'){
			$status = 'active open';
		}
		return array(
			'class' => $class,
			'subclass' => $subclass,
			'title' => $title,
			'actions' => $collapsible,
			'status' => $status,
			'weight' => $weight,
			'inner' => array(
				'class' => $iclass,
				'markup' => '',
				'status' => $inner_status,
			),
		);
	}

	
	
	
/**
 * @ Helper function for insert markup into our fieldsets array
 *
 */
	public static function insertFieldsetMarkup($fieldset, $markup, $render = TRUE){
		$markup = $render ? drupal_render($markup) : $markup;
		$fieldset['inner']['markup'] = $markup;
		$complete_fieldset = fr_groups_accordion_fieldset($fieldset);
		return $complete_fieldset;
	}

}





/**
 * @ Class for markup
 *
 */
class FortifiedDashboardMarkup{

	public function dashboardWrapper(){
		return array(
			'#type' => 'container',
			'#attributes' => array(
				'id' => 'account-admin-dash-wrapper',
			),
		);
	}
		
		
	public function dashMarkup($markup = '', $class = '', $weight = 100){
		return array(
			'#type' => 'markup',
			'#markup' => $markup,
			'#prefix' => '<div class="'.$class.'">',
			'#suffix' => '</div>',
			'#weight' => $weight,
		);
	}

}







/**
 * @ Central Station dashboard menu callback function
 *
 */
function fr_user_dash_admin($uid){
	// if the user is not registered denie them
	$user_id = NULL;
	if(empty($uid)){
		drupal_access_denied();
		drupal_exit();
	}
	$content = array();
	$authenticated = FALSE;
	//dashboard class
	$dashboard = new FortifiedAdminAccounts($uid);
	//authenticate the user
	if(!empty($dashboard->user_role['role'])){
		$authenticated = TRUE;
	}
	//if has access
	if($authenticated){
	
		switch($uid){
		case 'admin':
			$user_id = 1;
			break;
		case 'central-station':
			global $user;
			$user_id = $user->uid;
			break;
	}
	
		// add all necessary dashboard javascript files
		drupal_add_js(drupal_get_path('module', 'fr_user_dash') .'/js/fr_user_dash_custom_tooltips.js', array('type' => 'file', 'scope' => 'footer'));
		drupal_add_js(drupal_get_path('module', 'fr_groups') .'/js/fr_groups_modal_all_dvrs.js', array('type' => 'file', 'scope' => 'footer'));
		drupal_add_js(drupal_get_path('module', 'fr_user_dash') .'/js/fr_user_dash_reveal_cust.js', array('type' => 'file', 'scope' => 'footer'));
		drupal_add_js(drupal_get_path('module', 'fr_user_dash') .'/js/fr_user_dash_search_alarm_accounts.js', array('type' => 'file', 'scope' => 'footer'));
		drupal_add_js(drupal_get_path('module', 'fr_groups') .'/js/fr_user_dash_processing_modal.js', array('type' => 'file', 'scope' => 'footer'));

		//admin tools class
		$tools = new DashboardTools();
		$content['wrapper'] = $dashboard->dashboardWrapper();
		
		/*************** SHORTCUST ***************/
		$tools_fieldset = $dashboard->dashboardFieldset('Shortcuts', NULL, FALSE, TRUE, TRUE, NULL, TRUE -100);
		$tools_markup = $tools->basicTools();
		$content['wrapper']['tools'] = $dashboard->insertFieldsetMarkup($tools_fieldset, $tools_markup);
		/************* END SHORTCUTS *************/
		
		/******* ACCOUNT MANAGER VIEW FORM ******/
		$account_manager_fieldset = $dashboard->dashboardFieldset('Account Manager', NULL, FALSE, TRUE, TRUE, NULL, TRUE, -99);
		$account_manager_markup = views_embed_view('admin_users_dash', $display_id = 'block');
		$content['wrapper']['account_manager'] = $dashboard->insertFieldsetMarkup($account_manager_fieldset, $account_manager_markup, FALSE);
		/***** END ACCOUNT MANAGER VIEW FORM ****/
		
		/******** RECENT NOTIFICATIONS *********/
		$recent_notifications_fieldset = $dashboard->dashboardFieldset('Recent Alarm Notifications', NULL, FALSE, TRUE, TRUE, NULL, TRUE, -98);
		$recent_notifications_markup = ip_datatel_load_alarm_notifications($dashboard->uid);
		$content['wrapper']['alarm_notifications'] = $dashboard->insertFieldsetMarkup($recent_notifications_fieldset, $recent_notifications_markup);
		/****** END RECENT NOTIFICATIONS ********/
		
		/************* TOURS TODAY *************/
		$tours_today_fieldset = $dashboard->dashboardFieldset('Tours Today', NULL, FALSE, TRUE, TRUE, NULL, TRUE, -98);
		$tours_today_markup = fr_times_load_customers();
		$content['wrapper']['tours_today'] = $dashboard->insertFieldsetMarkup($tours_today_fieldset, $tours_today_markup);
		/********** END TOURS TODAY ***********/
		
		/********* Alarm Accounts ***********/
		$alarm_accounts_fieldset = $dashboard->dashboardFieldset('Alarm Systems', 'alarm-accounts', FALSE, TRUE, TRUE, NULL, TRUE, -97);
		$search_accounts_form = drupal_render(drupal_get_form('fr_user_dash_search_alarm_accounts_form'));
		$alarm_accounts_markup = ip_datatel_load_alarm_profile(1, 'all');
		$alarm_accounts_html = $search_accounts_form . $alarm_accounts_markup;
		$content['wrapper']['alarm_accounts'] = $dashboard->insertFieldsetMarkup($alarm_accounts_fieldset, $alarm_accounts_html, FALSE);
		/****** END Alarm Accounts **********/
		
		
		/********* Alarm Processing ***********/
		$processing_fieldset = $dashboard->dashboardFieldset('Alarm Processing', 'alarm-processing', FALSE, TRUE, TRUE, 'alarm-processing-inner', TRUE, -97);
		$processing_markup = ip_datatel_process_alarm_notifications($user_id, 'admin');
		$alarm_data = $processing_markup['content']['tools'];
		$alarm_data .= $processing_markup['content']['table'];
		$content['wrapper']['alarm_processing'] = $dashboard->insertFieldsetMarkup($processing_fieldset, $alarm_data, FALSE);
		/****** END Alarm Processing **********/
		
		/*************** BUGS  ***************/
		$bugs_fieldset = $dashboard->dashboardFieldset('Pending Bugs', NULL, FALSE, TRUE, TRUE, NULL, TRUE, -96);
		$bugs_class = new FortifiedBugs();
		$bugs_class->queryBugs();
		$bugs_markup = $bugs_class->renderBugs();
		$content['wrapper']['bugs'] = $dashboard->insertFieldsetMarkup($bugs_fieldset, $bugs_markup, FALSE);
		/************END BUGS  **************/
		
		
	}else{
		//if user is registered but not admin deny them access
		drupal_access_denied();
		drupal_exit();
	}
	
	return $content;

}



/**
 * implements hook_form
 * @ form for searching alarm accounts
 */
function fr_user_dash_search_alarm_accounts_form($node, &$form_state){
	$form = array();
	$form['wrapper'] = array(
		'#type' => 'container',
		'#attributes' => array(
			'id' => 'fr-dash-alarm-accounts-form',
		),
	);
	
	$form['wrapper']['name'] = array(
		'#type' => 'textfield',
		'#title' => t('Account Name'),
		'#description' => t('Search for an alarm bat'),
	);
	
	$form['wrapper']['type'] = array(
		'#type' => 'radios',
		'#title' => t('Search Type'),
		'#options' => array(
			'bat' => 'Bat Name',
			'account' => 'Account Name',
		),
		'#default_value' => 'bat',
	);
	
	$form['wrapper']['submit'][] = array(
		'#name' => 'search_accounts',
		'#type' => 'submit',
		'#value' => 'Search',
		'#ajax' => array(
			'callback' => '_fr_user_dash_search_accounts_callback',
			'wrapper' => 'fr-dash-alarm-accounts-form',
			'method' => 'replace',
			'effect' => 'fade',
		),
	);

	return $form;
}





/**
 * @ submit handler
 *  @ form fr_user_dash_search_alarm_accounts_form
 */
function _fr_user_dash_search_accounts_callback($form, &$form_state){
	$content = array();
	$results = NULL;
	$content['message']['#markup'] = 'Please input a name';
	if(!empty($form_state['values']['name'])){
		$search_name = $form_state['values']['name'];
		$search_type = $form_state['values']['type'];
		$query = new EntityFieldQuery();
		switch($search_type){
			case 'bat':
				$query->entityCondition('entity_type', 'node')
					->entityCondition('bundle', 'alarm')
					->propertyCondition('title', $search_name, '=');
				break;
			case 'account':
				$query->entityCondition('entity_type', 'node')
					->entityCondition('bundle', 'customer_group')
					->propertyCondition('title', $search_name, '=');
				break;
		}
		$result = $query->execute();
		$results = !empty($result['node']) ? $result['node'] : '';
		$fieldsets = new FortifiedAdminAccounts(NULL, FALSE, FALSE);
		if(isset($results)){
			$nids = array_keys($results);
			foreach($nids as $delta => $nid){
				$node = node_load($nid);
				$title = $node->title;
				$alarm_accounts_fieldset = $fieldsets->dashboardFieldset($title, NULL, TRUE, FALSE, TRUE, NULL, FALSE, -100);
				$alarm_account_markup = $fieldsets->dashMarkup($title);
				$content['fieldset'] = $fieldsets->insertFieldsetMarkup($alarm_accounts_fieldset, $alarm_account_markup);
			}
		}
	}
	return $content;
}



/**
 * @ Admin dashboard menu callback function
 *
 */
function fr_user_dash_central_station($uid){
	// if the user is not registered denie them
	$user_id = NULL;
	if(empty($uid)){
		drupal_access_denied();
		drupal_exit();
	}
	$content = array();
	$authenticated = FALSE;
	//dashboard class
	$dashboard = new FortifiedAdminAccounts($uid);
	//authenticate the user
	if(!empty($dashboard->user_role['role'])){
		$authenticated = TRUE;
	}
	//if has access
	if($authenticated){
	
		switch($uid){
		case 'admin':
			$user_id = 1;
			break;
		case 'central-station':
			global $user;
			$user_id = $user->uid;
			break;
	}
	
		// add all necessary dashboard javascript files
		drupal_add_js(drupal_get_path('module', 'fr_user_dash') .'/js/fr_user_dash_custom_tooltips.js', array('type' => 'file', 'scope' => 'footer'));
		drupal_add_js(drupal_get_path('module', 'fr_groups') .'/js/fr_groups_modal_all_dvrs.js', array('type' => 'file', 'scope' => 'footer'));
		drupal_add_js(drupal_get_path('module', 'fr_user_dash') .'/js/fr_user_dash_reveal_cust.js', array('type' => 'file', 'scope' => 'footer'));
		drupal_add_js(drupal_get_path('module', 'fr_user_dash') .'/js/fr_user_dash_search_alarm_accounts.js', array('type' => 'file', 'scope' => 'footer'));
		drupal_add_js(drupal_get_path('module', 'fr_groups') .'/js/fr_user_dash_processing_modal.js', array('type' => 'file', 'scope' => 'footer'));

		//admin tools class
		$tools = new DashboardTools();
		$content['wrapper'] = $dashboard->dashboardWrapper();
		
		/*************** SHORTCUST ***************/
		$tools_fieldset = $dashboard->dashboardFieldset('Shortcuts', NULL, FALSE, TRUE, TRUE, NULL, TRUE -100);
		$tools_markup = $tools->basicTools();
		$content['wrapper']['tools'] = $dashboard->insertFieldsetMarkup($tools_fieldset, $tools_markup);
		/************* END SHORTCUTS *************/
		
		/******* ACCOUNT MANAGER VIEW FORM ******/
		$account_manager_fieldset = $dashboard->dashboardFieldset('Account Manager', NULL, FALSE, TRUE, TRUE, NULL, TRUE, -99);
		$account_manager_markup = views_embed_view('admin_users_dash', $display_id = 'block');
		$content['wrapper']['account_manager'] = $dashboard->insertFieldsetMarkup($account_manager_fieldset, $account_manager_markup, FALSE);
		/***** END ACCOUNT MANAGER VIEW FORM ****/
		
		/******** RECENT NOTIFICATIONS *********/
		$recent_notifications_fieldset = $dashboard->dashboardFieldset('Recent Alarm Notifications', NULL, FALSE, TRUE, TRUE, NULL, TRUE, -98);
		$recent_notifications_markup = ip_datatel_load_alarm_notifications($dashboard->uid);
		$content['wrapper']['alarm_notifications'] = $dashboard->insertFieldsetMarkup($recent_notifications_fieldset, $recent_notifications_markup);
		/****** END RECENT NOTIFICATIONS ********/
		
		/************* TOURS TODAY *************/
		$tours_today_fieldset = $dashboard->dashboardFieldset('Tours Today', NULL, FALSE, TRUE, TRUE, NULL, TRUE, -98);
		$tours_today_markup = fr_times_load_customers();
		$content['wrapper']['tours_today'] = $dashboard->insertFieldsetMarkup($tours_today_fieldset, $tours_today_markup);
		/********** END TOURS TODAY ***********/
		
		/********* Alarm Accounts ***********/
		$alarm_accounts_fieldset = $dashboard->dashboardFieldset('Alarm Systems', 'alarm-accounts', FALSE, TRUE, TRUE, NULL, TRUE, -97);
		$search_accounts_form = drupal_render(drupal_get_form('fr_user_dash_search_alarm_accounts_form'));
		$alarm_accounts_markup = ip_datatel_load_alarm_profile(1, 'all');
		$alarm_accounts_html = $search_accounts_form . $alarm_accounts_markup;
		$content['wrapper']['alarm_accounts'] = $dashboard->insertFieldsetMarkup($alarm_accounts_fieldset, $alarm_accounts_html, FALSE);
		/****** END Alarm Accounts **********/
		
		
		/********* Alarm Processing ***********/
		$processing_fieldset = $dashboard->dashboardFieldset('Alarm Processing', 'alarm-processing-inner', FALSE, TRUE, TRUE, NULL, TRUE, -97);
		$processing_markup = ip_datatel_process_alarm_notifications($user_id, 'central-station');
		$alarm_data = $processing_markup['content']['tools'];
		$alarm_data .= $processing_markup['content']['table'];
		$content['wrapper']['alarm_processing'] = $dashboard->insertFieldsetMarkup($processing_fieldset, $alarm_data, FALSE);
		/****** END Alarm Processing **********/
		
		
		
	}else{
		//if user is registered but not admin deny them access
		drupal_access_denied();
		drupal_exit();
	}
	return $content;
}





/**
 * @ Implemenets hook_menu()
 *
 */
function fr_user_dash_menu() {
	// Central station dashboard
	$items['account/central-station/%'] = array(
		'page callback' => 'fr_user_dash_central_station',
		'page arguments' => array(1),
		'access callback' => TRUE,
		'type' => MENU_NORMAL_ITEM,
	);
	//Admin Dashboards
	$items['account/admin/%'] = array(
		'page callback' => 'fr_user_dash_admin',
		'page arguments' => array(1),
		'access callback' => TRUE,
		'type' => MENU_NORMAL_ITEM,
	);
	$items['account'] = array(
		'page callback' => 'fr_user_dash_account_redirect',
		'access callback' => TRUE,
		'type' => MENU_NORMAL_ITEM,
	);
	// ajax callbacks
	$items['fr_user_delete'] = array(
		'access callback' => TRUE,
		'page callback' => 'fr_user_dash_delete_callback',
		'type' => MENU_CALLBACK
	);
	$items['ajax/fr_user_dash_prefrences'] = array(
		'access callback' => TRUE,
		'page callback' => 'fr_user_dash_prefrences',
		'type' => MENU_CALLBACK
	);
	$items['fr_user_download'] = array(
		'access callback' => TRUE,
		'page callback' => 'fr_user_dash_download_callback',
		'type' => MENU_CALLBACK
	);
	$items['fr_user_data'] = array(
		'access callback' => TRUE,
		'page callback' => 'fr_user_dash_data_callback',
		'type' => MENU_CALLBACK
	);
	$items['fr_save_files'] = array(
		'access callback' => TRUE,
		'page callback' => 'fr_user_dash_save_callback',
		'type' => MENU_CALLBACK
	);
	$items['fr_preview_cust_data'] = array(
		'access callback' => TRUE,
		'page callback' => 'fr_preview_cust_data',
		'type' => MENU_CALLBACK
	);
	$items['fr_user_dash_tooltip_dvr'] = array(
		'access callback' => TRUE,
		'page callback' => 'fr_user_dash_tooltip_dvr',
		'type' => MENU_CALLBACK
	);
	$items['ajax/prev-sessions'] = array(
		'access callback' => TRUE,
		'page callback' => 'fr_processing_prev_sessions',
		'type' => MENU_CALLBACK
	);
	$items['ajax/fr_user_dash_customer_dvrs'] = array(
		'access callback' => TRUE,
		'page callback' => 'fr_user_dash_customer_dvrs',
		'type' => MENU_CALLBACK
	);
	$items['ajax/fr_user_dash_delete_bug'] = array(
		'access callback' => TRUE,
		'page callback' => 'fr_user_dash_delete_bug',
		'type' => MENU_CALLBACK
	);
	return $items;
}



function fr_user_dash_page_alter(&$page){
	$arg = arg();
	if(!empty($arg[1])){
		if($arg[0] == 'account' && $arg[1] == 'admin' || $arg[1] == 'central-station'){
			//prefrences modal
			$modal = '<div class="close-reveal-modal close-modal">&#215;</div><br/><div>'.drupal_render(drupal_get_form('fr_groups_prefrences_form')).'</div>';
			$id = 'admin-prefrences-form';
			$class = 'reveal-modal xlarge';
			$page['modal']['default'] = fr_groups_markup($modal, $class, $id, NULL);
			//processing modal
			$page['modal']['alarm_processing'] = array(
					'#type' => 'markup',
					'#markup' => '<div class="close-modal close-processing-modal">&#215;</div><div class="processing-modal"></div>',
					'#prefix' => '<div id="processingModal" data-processing-id="'.$arg[2].'" data-processing-role="admin" class="reveal-modal xlarge">',
					'#suffix' => '</div>',
				);
		}
	}
}


function fr_user_dash_prefrences(){
	$form = '';
	$auth = $_POST['arguments'];
	if($auth){
		$form = drupal_render(drupal_get_form('fr_groups_prefrences_form'));
	}
	drupal_json_output(array('html' => $form));
	drupal_exit();
}




/**
 * @ Menu Callback for Bugs
 *
 */
function fr_user_dash_delete_bug(){
	$bug_id = !empty($_POST['data']) ? $_POST['data']: NULL;
	if($bug_id){
		$delete = db_delete('bugs')
		->condition('bug_id', $bug_id, '=');
		$result = $delete->execute();
	}
	drupal_json_output(array('status' => 1));
	drupal_exit();
}





/**
 * @ Menu Callback for Processing Previous Sessions
 *
 */
function fr_processing_prev_sessions(){
	$uid = $_POST['arguments']['data'];
	$event_data = array();
	$content = array();
	$return = 'Sorry, no information available at this time';
	if($uid){
		$query_sessions = fr_user_dash_query_processing_sessiosn($uid);
		if(isset($query_sessions) && !empty($query_sessions)){
			foreach($query_sessions as $delta => $session){
				if(!empty($session->sessions)){
					$unserialize = unserialize($session->sessions);
					$event_data[$session->delta] = $unserialize;
				}
			}
		}
		if(isset($event_data) && !empty($event_data)){
			$headers = array(
				'Account',
				'Date',
				'Signal Code',
				'Signal',
				'Zone',
				'Type',
				'View',
			);
			$content['row'] = fr_user_dash_fieldset('Previous Alarm Processing Sessions', array('alarm-proc-previous-sessions', 'large-12', 'columns'), '');
			krsort($event_data, SORT_NUMERIC);
			$rows = array();
			$table_rows = array();
			$table_content = array();
			foreach($event_data as $event_date => $event_data){
				$date = date('Y-m-d H:i:s', $event_date);
				$obj = current($event_data);
				$table = array(
					'#theme' => 'table',
					'#header' => $headers,
					'#rows' => $table_rows[$event_date] = IpdatatelProcessEvents::buildEventTable($event_data, NULL, FALSE),
					'#empty' => t('Sorry, no data for this session.'),
					'#attributes' => array(
						'class' => array('large-12', 'columns'),
					),
				);
				$rows[] = '<div class="session-wrapper"><div class="trigger-expand-session">'.$date.'</div><div class="expand-event-sessions">'.drupal_render($table).'</div></div>';
			}
			if(!empty($rows)){
				if(count($rows > 10)){
					$pager = array_chunk($rows, 10);
					$rows = array_slice($rows, 0, 10, TRUE);
				}
				$content['row']['item_list'] = array(
					'#theme' => 'item_list',
					'#items' => $rows,
					'#attributes' => array(
						'id' => 'prev-sessions-list',
					),
					'#weight' => 100,
				);
			}
		}
		$return = !empty($content) ? drupal_render($content) : '<div>Sorry, it looks like you have no sessions! <br/>Sessions are saved automatically every 2 minutes.</div>';
	}
	drupal_json_output(array('html' => $return));
	drupal_exit();
}





/**
 * @ Menu Callback for the admin tooltip dvr popup
 *
 */
function fr_user_dash_tooltip_dvr(){
	global $user;
	$path = FortifiedAdminAccounts::authenticateAccount($user);
	$path = !empty($path['path']) ? $path['path'] : '';
	$admin_uid = $user->uid;
	$account_id = !empty($_POST['arguments']['data']) ? $_POST['arguments']['data'] : false;
	$content = fr_user_dash_markup('Sorry, no Information was found for this customer', '');
	if($account_id){
		$cust_dvrs = fr_tweaks_query_dvrs($account_id);
		if(!empty($cust_dvrs)){
			$content = array();
			foreach($cust_dvrs as $nid => $data){
				$content[$nid]['wrapper'] = array(
					'#type' => 'container',
					'#attributes' => array(
						'class' => array('row'),
						'style' => array('border:1px solid #d0d0d0; padding:5px;'),
					),
				);
				$options = array(
					'attributes' => array(
						'class' => array('reveal-cust-dvr'),
					),
				);
				foreach($data as $field_name => $field_data){
					switch($field_name){
					case 'field_dvr_address':
						if(!empty($field_data)){
							$address = '<div class="admin-dash">Address:</div>';
							$address .= $field_data['thoroughfare'].'<br/>';
							$address .= $field_data['locality'].', '.$field_data['administrative_area'].' '.$field_data['postal_code'].'<br/>';
							$content[$nid]['wrapper']['adress'] = fr_user_dash_markup($address, 'large-6 columns', 100);
						}
						break;
					case 'dvr_title':
						$title = $field_data;
						break;
					case 'dvr_tour_times':

						break;
					case 'dvr_url':
						$options['attributes']['data-dvr-url'] = 'http://'.$field_data;
						break;
					case 'field_dvr_master_username';
						$options['attributes']['data-dvr-user'] = $field_data;
						break;
					case 'field_dvr_master_password';
						$options['attributes']['data-dvr-pass'] = $field_data;
						break;
					}
				}
				$options['attributes']['data-dvr-function'] = 'OnLogin';
				$link = l($title, 'http://'.$_SERVER['HTTP_HOST'].'/'.$path.'#', $options);
				$content[$nid]['wrapper']['dvr_url'] = fr_user_dash_markup($link, 'button next large-4 columns', -100);
			}
		}
	}
	$html = array('html' => drupal_render($content));
	drupal_json_output($html);
	drupal_exit();
}



/**
 * @ Menu Callback for previwing a report in modal
 *
 */
function fr_preview_cust_data(){
	$nid = $_POST['cust_nid'];
	$node = node_load($nid);
	$view_node = drupal_render(node_view($node, $view_mode = 'full'));
	$return_data = array('node_data' => $view_node);
	drupal_json_output($return_data);
	drupal_exit();
}





/**
 * @ Menu Callback saving customers reports
 *
 */
function fr_user_dash_save_callback(){
	$nid = $_POST['files'];
	$getRequest = new getRequest();
	$view = $getRequest->saveFiles($nid);
	drupal_json_output($view);
	drupal_exit();
}




/**
 * @ Menu Callback admin for previewing reports that belong to a customer
 *
 */
function fr_user_dash_data_callback(){
	$uid = $_POST['uids'];
	$type = $_POST['types'];
	$getRequest = new getRequest();
	$view = $getRequest->getView($uid, $type);
	drupal_json_output($view);
	drupal_exit();
}





/**
 * @ Menu Callback for customers to download there reports
 *
 */
function fr_user_dash_download_callback(){
	$nid = $_POST['nids'];
	$getRequest = new getRequest();
	$getRequest->loadUser();
	$link = $getRequest->requestDownload($nid);
	$status = !empty($getRequest->status) ? $getRequest->status : array('status' => '0');
	drupal_json_output($status);
	drupal_exit();
}





/**
 * @ function to load the video file being downloaded, change the filemime for download.
 *
 */
function fr_user_dash_video_file_download($file){
	$uri = file_create_url($file->uri);
	$file->filemime = 'application/mp4';
	file_save($file);
	return array('uri' => $uri, 'other' => $file);
}




/**
 * @ Menu Callback customers to delete a report
 *
 */
function fr_user_dash_delete_callback() {
	$nids = $_POST;
	$i = 0;
	if(is_array($nids) && !empty($nids)){
		foreach($nids['nids'] as $key => $node){
			if(!empty($node) && $node != 0){
				$delete = node_delete($node);
				if(!node_load($node)){
					$i++;
				}else{
					$errors[] = 1;
				}
			}
		}
	}
	$return = empty($errors) ? 'Successfully Deleted '.$i.' items.' : 'Failed to delete items!';
	$output = array('status' => $return);

	drupal_json_output($output);

	//return if this operatio nwas successfull
	drupal_exit();
}



/**
 * @ Generic markup function
 *
 */
function fr_user_dash_markup($markup, $class, $weight = 100){
	return array(
		'#type' => 'markup',
		'#markup' => $markup,
		'#prefix' => '<div class="'.$class.'">',
		'#suffix' => '</div>',
		'#weight' => $weight,
	);
}



/**
 * @ Function for loading a customers alarm information
 *
 */
function _load_account_information($uid){
	$ipdatatel = new ipDatatel();
	$account_info = $ipdatatel->loadAccountInformation($uid);
	return $account_info;
}



/**
 * @ Function quering processing sessions
 *
 */
function fr_user_dash_query_processing_sessiosn($uid, $delta = 0){
	$data = array();
	$query = db_query('SELECT * FROM {customer_variables} WHERE uid = :uid AND delta != :delta', array(':uid' => $uid, ':delta' => $delta));
	while ($return_data = $query->fetchObject()) {
		$data[] = $return_data;
	}
	return $data;
}




/**
 * @ Function for returning customers prefrences
 *
 */
function fr_user_dash_query_customer_variables($uid, $delta = 0, $unserialize = TRUE){
	$data = '';
	$customer_variables = db_query('SELECT * FROM {customer_variables} WHERE uid = :uid AND delta = :delta', array(':uid' => $uid, ':delta' => $delta));
	$record = $customer_variables->fetchObject();
	if(!empty($record) && !empty($record->data)){
		if($unserialize){
			$data = unserialize($record->data);
		}else{
			$data = $record;
		}
	}
	return $data;
}
