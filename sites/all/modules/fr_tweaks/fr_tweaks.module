<?php


function fr_tweaks_menu(){
	$items['_fr_tweaks_alter_autocomplete'] = array(
		'page callback' => '_fr_tweaks_alter_autocomplete',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	return $items;
}


function _fr_tweaks_alter_autocomplete($string){
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'profile2')
	->fieldCondition('field_central_station_identifier', 'value', '%'.$string.'%', 'like');
	$result = $query->execute();
	$options = array();
	if (!empty($result['profile2'])) {
		$profiles2 = array_keys($result['profile2']);
		foreach($profiles2 as $delta => $pid){
			$profile = profile2_load($pid);
			$label = $profile->field_central_station_identifier['und'][0]['value'];
			$profile_id = $pid;
			$string = array('"'.$label.' ('.$profile_id.')"' => $label);
			$key = "$label ($profile_id)";
			// Labels containing commas or quotes must be wrapped in quotes.
			if (strpos($key, ',') !== FALSE || strpos($key, '"') !== FALSE) {
				$key = '"' . str_replace('"', '""', $key) . '"';
			}
			$options[$key] = $label;
		}
	}else{
		$options[0] = 'No '. $string . ' created';
	}
	drupal_json_output($options);
	exit();
}




function fr_tweaks_form_profile2_form_alter(&$form, &$form_state) {
	if(!empty($form['profile_account_manager'])){
		$form['profile_account_manager']['field_cust_central_station']['und']['#autocomplete_path'] = '_fr_tweaks_alter_autocomplete';
	}
	//dpm($form);
	if(!empty($form['profile_customer'])){
		$default_values = array();
		$user_profile = _build_profile_form_permissions($uid);
		if(!empty($form_state['profiles']['customer']->field_customer_alarm_permissions['und'][0]['value'])){
			$default_values['alarm'] = unserialize($form_state['profiles']['customer']->field_customer_alarm_permissions['und'][0]['value']);
		}
		if(!empty($form_state['profiles']['customer']->field_customer_dvr_permissions['und'][0]['value'])){
			$default_values['dvr'] = unserialize($form_state['profiles']['customer']->field_customer_dvr_permissions['und'][0]['value']);
		}
		$form['profile_customer']['field_customer_dvr_username']['#states'] = array(
			'visible' => array(
				':input[name="profile_customer[field_customer_service_type][und][dvr]"]' => array('checked' => TRUE),
			),
		);
		$form['profile_customer']['field_customer_dvr_password']['#states'] = array(
			'visible' => array(
				':input[name="profile_customer[field_customer_service_type][und][dvr]"]' => array('checked' => TRUE),
			),
		);
		$test = _build_profile_form_permissions($form, $default_values);
	}
}


function _build_profile_form_permissions(&$form, $default_values = NULL){
	global $user;
	$form['profile_customer']['custom_permissions'] = array(
		'#type' => 'fieldset',
		'#title' => 'Custom Permissions',
		'#collapsed' => FALSE,
		'#collapsible' => FALSE,
		'#weight' => 101,
	);

	$auth = array(3 => 'administrator', 8 => 'supervisor', 9 => 'account_manager');
	$account_type = array_intersect(array_keys($auth), array_keys($user->roles));
	if($account_type){
		$uid = $user->uid;
		$user_profile = fr_tweaks_load_user_profile2_account_id($user, $account_type);
		$account_user = ip_datatel_user_type($user, $account_type);
		if(!empty($user_profile['account_node']) && !empty($user_profile['account_node_id'])){
			$account_node = $user_profile['account_node'];
			$account_node_id = $user_profile['account_node_id'];
			$form['profile_customer']['field_cust_alarm_group_owner']['und'][0]['target_id']['#default_value'] = $account_node->title.' ('.$account_node_id.')';
			$form['profile_customer']['field_cust_alarm_group_owner']['und'][0]['target_id']['#description'] = $account_node_id;
			$form['profile_customer']['field_cust_alarm_group_owner']['und'][0]['#disabled'] = TRUE;
			$account_service_types = _fr_tweaks_node_build_permissions($account_node, $account_node_id);
			if(!empty($account_service_types) && is_array($account_service_types)){
				foreach($account_service_types as $type => $bool){
					switch($type){
					case'has_alarm':
						$alarms = ip_datatel_return_alarm_account_information($account_user);
						if(!empty($alarms) && is_array($alarms)){
							$alarms = current($alarms);
							$permissions = array();
							$permissions['view_alarm'] = 'Display alarm';
							$form['profile_customer']['custom_permissions']['alarm'] = array(
								'#type' => 'fieldset',
								'#title' => 'Alarm System Permissions',
								'#collapsed' => TRUE,
								'#collapsible' => TRUE,
								'#tree' => TRUE,
							);
							foreach($alarms as $account_name => $alarm_data){
								$account_name = $alarm_data['username'];
								$form['profile_customer']['custom_permissions']['alarm']['custom_permissions_'.$account_name.''] = array(
									'#type' => 'fieldset',
									'#title' => $account_name."'s Permissions",
									'#collapsed' => FALSE,
									'#collapsible' => TRUE,
									'#tree' => TRUE,
								);
								if(!empty($alarm_data['permissions'])){
									foreach($alarm_data['permissions'] as $name => $val){
										switch($name){
										case'edit_users':
											if($val){
												$permissions['edit_users'] = 'Can edit alarm users';
											}
											break;
										case'events':
											if($val){
												$permissions['events'] = 'Can view alarm events';
											}
											break;
										case'add_users':
											if($val){
												$permissions['add_users'] = 'Can add alarm users';
											}
											break;
										case'delete_users':
											if($val){
												$permissions['delete_users'] = 'Delete alarm users';
											}
											break;
										case'recent_events':
											if($val){
												$permissions['recent_events'] = 'Can view recent events';
											}
											break;
										case'process_alarms':
											if($val){
												$permissions['process_alarm'] = 'Can process alarms';
											}
											break;
										}
									}
								}
								$form['profile_customer']['custom_permissions']['alarm']['custom_permissions_'.$account_name.''][$account_name] = array(
									'#type' => 'checkboxes',
									'#options' => $permissions,
								);
								if(!empty($default_values['alarm'])){
									$form['profile_customer']['custom_permissions']['alarm']['custom_permissions_'.$account_name.''][$account_name]['#default_value'] = _fr_tweaks_default_values($default_values['alarm'], $account_name);
								}else{
									$form['profile_customer']['custom_permissions']['alarm']['custom_permissions_'.$account_name.''][$account_name]['#default_value'] = _fr_tweaks_default_values($permissions, 'alarm');
								}
							}
						}
						break;
					case'has_dvr':
						if(!empty($account_service_types['dvr_data'])){
							$permissions = array();
							$form['profile_customer']['custom_permissions']['dvr'] = array(
								'#type' => 'fieldset',
								'#title' => 'Camera System Permissions',
								'#collapsed' => TRUE,
								'#collapsible' => TRUE,
								'#tree' => TRUE,
							);
							foreach($account_service_types['dvr_data'] as $nid => $values){

								$permissions['view_dvrs'] = "Able to view ".$values->dvr_title."'s DVR";
								$form['profile_customer']['custom_permissions']['dvr']['custom_permissions_'.$nid] = array(
									'#type' => 'fieldset',
									'#title' => $values->dvr_title."'s Permissions",
									'#collapsed' => FALSE,
									'#collapsible' => TRUE,
									'#tree' => TRUE,
								);
								if(!empty($values->dvr_tour_times)){
									$permissions['view_tours'] = 'Can view Virtual Tours';
									$permissions['view_events'] = 'Can view Events';
									$permissions['view_reports'] = 'Can view Incident Reports';
								}
								$form['profile_customer']['custom_permissions']['dvr']['custom_permissions_'.$nid][$values->dvr_title] = array(
									'#type' => 'checkboxes',
									'#options' => $permissions,
								);
								if(!empty($default_values['dvr'])){
									$form['profile_customer']['custom_permissions']['dvr']['custom_permissions_'.$nid.''][$values->dvr_title]['#default_value'] = _fr_tweaks_default_values($default_values['dvr'], $values->dvr_title);
								}else{
									$form['profile_customer']['custom_permissions']['dvr']['custom_permissions_'.$nid.''][$values->dvr_title]['#default_value'] = _fr_tweaks_default_values($permissions);

								}
							}
						}
						break;
					}
				}
			}
			$form['profile_customer']['#group_children']['custom_permissions'] = 'group_cust_infor';
			$form['profile_customer']['field_customer_alarm_permissions']['#prefix'] = '<div id="alarm-system-permissions">';
			$form['profile_customer']['field_customer_alarm_permissions']['#suffix'] = '</div>';
			$form['profile_customer']['field_customer_dvr_permissions']['#prefix'] = '<div id="dvr-system-permissions">';
			$form['profile_customer']['field_customer_dvr_permissions']['#suffix'] = '</div>';
		}
		$form['#submit'][] = 'customer_profile_submit';
		$form['#validate'][] = 'fr_val_cust';
	}
	$form['profile_customer']['field_customer_alarm_permissions']['#type'] = 'hidden';
	$form['profile_customer']['field_customer_dvr_permissions']['#type'] = 'hidden';

}


function _fr_tweaks_default_values($default_values, $arg = NULL){
	$defaults = array();
	if(!empty($default_values[$arg])){
		foreach($default_values[$arg] as $permission => $permission_value){
			$defaults[$permission] = $permission_value;
		}
	}else{
		foreach($default_values as $name => $value){
			$defaults[$name] = $name;
		}
	}
	return $defaults;
}


function customer_profile_submit($form, &$form_state){
	if(!empty($form_state['values']['profile_customer']['custom_permissions'])){
		$custom_permsissions = $form_state['values']['profile_customer']['custom_permissions'];
		foreach($custom_permsissions as $type => $data){
			switch($type){
			case 'dvr':
				$dvr_data = array();
				foreach($data as $dvr_wrapper => $dvr_account){
					foreach($dvr_account as $dvr_keys => $dvr_permission_data){
						foreach($dvr_permission_data as $dvr_permissions => $dvr_values){
							if(!empty($dvr_values) && isset($dvr_values)){
								$dvr_data[$dvr_keys][$dvr_permissions] = $dvr_values;
							}
						}
					}
				}
				if(!empty($dvr_data) && isset($dvr_data)){
					$dvr_data = serialize($dvr_data);
				}
				$form_state['values']['profile_customer']['field_customer_dvr_permissions']['und'][0]['value'] = !empty($dvr_data) ? $dvr_data : '';
				break;
			case 'alarm':
				$alarm_data = array();
				foreach($data as $wrapper => $account){
					foreach($account as $keys => $permission_data){
						foreach($permission_data as $permission => $value){
							if(!empty($value) && isset($value)){
								$alarm_data[$keys][$permission] = $value;
							}
						}
					}
				}
				if(!empty($alarm_data) && isset($alarm_data)){
					$alarm_data = serialize($alarm_data);
				}
				$form_state['values']['profile_customer']['field_customer_alarm_permissions']['und'][0]['value'] = !empty($alarm_data) ? $alarm_data : '';
				break;
			}
		}
	}
}


function _fr_tweaks_ajax_callback($form, $form_state){
	return $form['profile_customer']['#group_children']['custom_permissions'];
}

function _fr_tweaks_node_build_permissions($account_node, $account_id){
	$data = array();
	if($account_node){
		foreach($account_node as $fields => $fvalues){
			switch($fields){
			case'field_cust_service_type':
				if(!empty($fvalues['und'])){
					foreach($fvalues['und'] as $delta => $value){
						switch($value['value']){
						case'cam':
							$data['has_dvr'] = TRUE;
							$data['dvr_data'] = fr_tweaks_query_dvrs($account_id);
							break;
						case'alarm':
							$data['has_alarm'] = TRUE;
							break;
						}
					}
				}
				break;
			}
		}
	}
	return $data;
}




function fr_tweaks_query_dvrs($account_id){
	$DvrData = FALSE;
	$query = new EntityFieldQuery;
	$query->entityCondition('entity_type', 'node')
	->entityCondition('bundle', 'dvr')
	->fieldCondition('field_cust_alarm_group_owner', 'target_id', $account_id, '=');
	$result = $query->execute();
	if(!empty($result['node'])){
		$results = $result['node'];
		$DvrData = array();
		foreach($results as $key => $data){
			$nodes = node_load($data->nid);
			$DvrData[$key] = new stdClass();
			foreach($nodes as $nid => $values){
				switch($nid){
				case'title':
					$DvrData[$key]->dvr_title = !empty($values) ? $values : NULL;
					break;
				case'field_cust_dvr_url':
					$DvrData[$key]->dvr_url = !empty($values['und'][0]['value']) ? $values['und'][0]['value'] : NULL;
					break;
				case'field_cust_virtual_tours':
					$DvrDate[$key]->dvr_tours = !empty($values['und'][0]['value']) ? $values['und'][0]['value'] : NULL;
					break;
				case'field_fr_vt_tour_times':
					$DvrData[$key]->dvr_tour_times = !empty($values['und'][0]) ? $values['und'][0] : NULL;
					break;
				case 'field_dvr_address':
					$DvrData[$key]->field_dvr_address = !empty($values['und'][0]) ? $values['und'][0] : NULL;
					break;
				case 'field_dvr_master_password':
					$DvrData[$key]->field_dvr_master_password = !empty($values['und'][0]['value']) ? $values['und'][0]['value'] : NULL;
					break;
				case 'field_dvr_master_username':
					$DvrData[$key]->field_dvr_master_username = !empty($values['und'][0]['value']) ? $values['und'][0]['value'] : NULL;
					break;
				}
			}
		}
	}
	return $DvrData;
}



function ip_datatel_user_type($account_user, $account_type){
	if(is_array($account_type)){
		if(array_key_exists(1, $account_type)){
			$arg = arg();
			if(!empty($arg[1])){
				$account_user = user_load($arg[1]);
			}
		}
	}
	return $account_user;
}

function fr_tweaks_load_user_profile2_account_id($user, $account_type){
	$administer_roles = $user->roles;
	$account_user = ip_datatel_user_type($user, $account_type);
	$account_node = NULL;
	$account_owner_id = NULL;
	$profile = profile2_load_by_user($account_user->uid, $type_name = NULL);
	if($profile && array_key_exists(9, $administer_roles)){
		if(!empty($profile['account_manager']->field_cust_alarm_group_owner['und'][0]['target_id'])){
			$account_owner_id = $profile['account_manager']->field_cust_alarm_group_owner['und'][0]['target_id'];
			$account_node = node_load($account_owner_id);
		}
	}elseif(array_key_exists(2, $administer_roles)){
		if(!empty($profile['customer']->field_cust_alarm_group_owner['und'][0]['target_id'])){
			$account_owner_id = $profile['customer']->field_cust_alarm_group_owner['und'][0]['target_id'];
			$account_node = node_load($account_owner_id);
		}
	}
	return array('account_node' => $account_node, 'account_node_id' => $account_owner_id);
}


function fr_val_cust($form, &$form_state){

}


function fr_val_user_form($form, &$form_state){
	/*$is_cust = !empty($form_state['values']['roles'][4]) ? $form_state['values']['roles'][4] : FALSE;
	if($is_cust != FALSE){
		$account_name = $form_state['values']['name'];
		if(!empty($form_state['build_info']['args'][0]->uid)){
			$uid = $form_state['build_info']['args'][0]->uid;
			$profile = profile2_load_by_user($uid, $type_name = NULL);
			if($profile){
				$profile_name = $profile['customer']->field_cust_name['und'][0]['safe_value'];
				if($profile_name != $account_name){
					if(file_exists('./sites/default/files/fortified/'.strtolower($profile_name).'')){
						$path = './sites/default/files/fortified/';
						rename($path.'/'.strtolower($profile_name), $path.'/'.strtolower($account_name));
					}
					$profile['customer']->field_cust_name['und'][0]['safe_value'] = $account_name;
					$profile['customer']->field_cust_name['und'][0]['value'] = $account_name;
					profile2_save($profile['customer']);
				}
			}
		}
	}*/
}

function fr_user_reg_form_submit($form, &$form_state){
	if($form_state['values']['roles'][4] || $form_state['values']['roles_change'][4]){
		$redirect = 'customer';
	}elseif(!empty($form_state['values']['roles'][9]) && $form_state['values']['roles'][9] == TRUE){
		$redirect = 'account_manager';
	}
	if(!empty($redirect)){
		if(!empty($form_state['values']['uid'])){
			$uid = $form_state['values']['uid'];
			$form_state['redirect'] = array('user/'.$uid.'/edit/'.$redirect.'');
		}
	}
	return $form_state;
}



function fr_tweaks_dvr_form_submit($form, &$form_state){
	$has_tours = !empty($form_state['values']['field_cust_virtual_tours']['und'][0]['value']) ? $form_state['values']['field_cust_virtual_tours']['und'][0]['value'] : NULL;
	$this_user = !empty($form_state['values']['field_alarm_customer']['und'][0]['target_id']) ? $form_state['values']['field_alarm_customer']['und'][0]['target_id'] : NULL;
	$dvr_name = strtolower($form_state['values']['title']);
	$has_folders = file_exists('./sites/default/files/fortified/'.$dvr_name.'/');
	if(!$has_folders){
		if($has_tours == 'yes'){
			$account_folder = _create_folders($dvr_name);
		}
	}
}




function _create_folders($account_name){
	$created = FALSE;
	$path = './sites/default/files/fortified/';
	$folders = array('images', 'videos');
	$old_umask = umask(0);
	if(!file_exists($path.'/'.$account_name)){
		try{
			$account_folder = mkdir($path.'/'.$account_name.'/', 0777);
		}
		catch (Exception $e){
			throw new Exception('The folder cannot be created do to a permission error!');
		}
		if($account_folder){
			try{
				chmod($path.'/'.$account_name, 0777);
			}
			catch (Exception $e){
				throw new Exception('The folder was created but its permissions could not be set! ');
			}
			foreach($folders as $key => $value){
				try{
					$sub_folders = mkdir($path.'/'.$account_name.'/'.$value.'/', 0777);
				}
				catch (Exception $e){
					throw new Exception('The sub folder '.$value.' could not be created do to a permissions error! ');
				}
				if($sub_folders){
					try{
						chmod($path.'/'.$account_name.'/'.$value, 0777);
					}
					catch (Exception $e){
						throw new Exception('The sub folder '.$value.' permissions could not be changed do to a permissions error!');
					}
				}
			}
		}
		if($account_folder){
			$created = TRUE;
		}
	}elseif(is_writable($path.'/'.$account_name)){
		$created = TRUE;
	}
	return $created;
}



function fr_tweaks_views_pre_render(&$view){
	switch($view->name){
	case'slide_show':

		if(!empty($view->result)){
			foreach($view->result as $key => $fields){
				if(!empty($fields->field_field_main_page_map_id) && !empty($fields->field_field_main_page_featured_image)){
					$map = $fields->field_field_main_page_map_id;
					$image = $fields->field_field_main_page_featured_image[0]['rendered']['#item'];
					$map_id = $map[0]['rendered']['#markup'];
					$image['attributes']['usemap'] = array($map_id);
					$view->result[$key]->field_field_main_page_featured_image[0]['rendered']['#item'] = $image;
					//$view->result[$key]->field_field_main_page_featured_image[0]['rendered']['#theme'] = 'slide_image';
				}
			}
		}
		//drupal_render($view->result[0]->field_field_main_page_image_map[0]['rendered']['#markup']);
		return $view;
		break;
	}
}


function fr_tweaks_access_denied(){
	drupal_access_denied();
	drupal_exit();
}


function fr_tweaks_form_alter(&$form, &$form_state, $form_id){
	global $user;
	switch($form_id){

	case'customer_group_node_form':
		$form['field_cust_alarm_url']['#type'] = 'hidden';
		$form['field_cust_alarm_settings']['#states'] = array(
			'visible' => array(
				':input[name="field_cust_service_type[und][alarm]"]' => array('checked' => TRUE),
			),
		);
		break;

	case 'webform_client_form_5':
		$form['#submit'][] = 'fr_tweaks_form_submit';

		break;
	case'user_profile_form':
		if(!empty($form['#user']->uid)){
			if($form['#user']->uid != $user->uid && !array_key_exists(3, $user->roles) && empty($form['profile_customer'])){
				fr_tweaks_access_denied();
			}elseif(!empty($form['profile_customer']) && $form['#user']->uid != $user->uid && !array_key_exists(3, $user->roles) && array_key_exists(9, $user->roles)){
				$account = fr_tweaks_load_user_profile2_account_id($user, $user->roles);
				if(!empty($account['account_node_id'])){
					if(!empty($form['profile_customer']['field_cust_alarm_group_owner']['und'][0]['target_id']['#description'])){
						if($form['profile_customer']['field_cust_alarm_group_owner']['und'][0]['target_id']['#description'] != $account['account_node_id']){
							fr_tweaks_access_denied();
						}	
					}else{
						fr_tweaks_access_denied();
					}
				}else{
					fr_tweaks_access_denied();
				}
			}
		}
		//for account managers so that they cant change there roll and can only asign the customer role to users they add
		if(array_key_exists(9, $user->roles)){
			$form['account']['roles_change']['#default_value'] = array(4);
			$form['account']['roles_change']['#disabled'] = TRUE;
			if(!empty($form['#user']->uid)){
				if($form['#user']->uid == $user->uid){
					unset($form['account']['roles_change']['#default_value']);
					$form['account']['roles_change']['#disabled'] = TRUE;
				}	
			}
		}
		$form['#validate'][] = 'fr_val_user_form';
		break;

	case'user_register_form':
		if(array_key_exists(9, $user->roles)){
			$form['account']['roles_change']['#default_value'] = array(4);
			$form['account']['roles_change']['#disabled'] = TRUE;
		}
		$form['#submit'][] = 'fr_user_reg_form_submit';
		
		break;

	case'user_login':
		$form['name']['#prefix'] = '<div class="login-field large-6 small-12 columns">';
		$form['name']['#suffix'] = '</div>';
		$form['pass']['#prefix'] = '<div class="login-field large-6 small-12 columns">';
		$form['pass']['#suffix'] = '</div>';
		$form['actions']['submit']['#prefix'] = '<div class="login-field-submit large-6 columns small-4">';
		$form['actions']['submit']['#suffix'] = '</div>';
		break;

	case'views_exposed_form';


		switch($form['#id']){
		case'views-exposed-form-admin-users-dash-block':

			$form['actions_wrapper'] = array(
				'#type' => 'container',
				'#attributes' => array(
					'class' => array('twelve', 'columns'),
				),
			);
			$form['actions_wrapper']['reset'] = array(
				'#type' => 'markup',
				'#markup' => '<input type="button" href="#" value="Reset" Onclick="location.reload();"/>',
				'#prefix' => '<div class="form-reset">',
				'#suffix' => '</div>',
			);
			$submit = $form['submit'];
			$form['actions_wrapper']['submit'] = $submit;
			unset($form['submit']);
			break;

		case'views-exposed-form-saved-virtual-tours-block':
			$form['#prefix'] = '<div class="sort-saved-files large-3 columns">';
			$form['#suffix'] = '</div>';
			$keep = array('fortified_events', 'fortified_incident_reports', 'fortified_virtual_tours');
			foreach($form['type_1']['#options'] as $key => $value){
				if(!in_array($key, $keep)){
					unset($form['type_1']['#options'][$key]);
					unset($form['type_1']['#options'][$key][$value]);
				}
			}

			break;
		}
		break;

	case'front_page_menu_node_form':
		$form['body']['#states'] = array(
			'visible' => array(
				':input[name="field_front_page_link_custum[und][no]"]' => array('checked' => TRUE),
			),
		);
		$form['field_main_page_to_link']['und'][0]['target_id']['#states'] = array(
			'visible' => array(
				':input[name="field_front_page_link_custum[und][yes]"]' => array('checked' => TRUE),
			),
		);
		break;


	case'user_multiple_cancel_confirm':
		if(in_array(1, array_keys($form['accounts']))){
			drupal_not_found();
			drupal_exit();
		}
		break;

	case'search_block_form':

		$form['container'] = array(
			'#type' => 'container',
			'#attributes' => array(
				'class' => array('search-block-wrapper'),
			),
		);
		unset($form['search_block_form']);
		unset($form['actions']['submit']);
		$form['container']['search_block_form'] = array(
			'#type' => 'textfield',
			'#size' => 20,
			'#weight' => 100,
			'#attributes' => array(
				'placeholder' => array('Search...'),
				'class' => array('search-block-input', 'form-item'),
			),
		);
		$form['container']['submit'] = array(
			'#type' => 'submit',
			'#title' => 'search',
			'#weight' => -100,
			'#attributes' => array(
				'style' => array('background: white url(../../sites/default/files/search-icon.png) top no-repeat;'),
				'id' => 'search-form-submit',
			),
		);
		$form['#attributes'] = array(
			'id' => 'search-block',
		);

		break;
	case 'dvr_node_form':

		unset($form['profile_customer']['field_cust_virtual_tours']['und']['#options']['_none']);
		drupal_add_js(drupal_get_path('module', 'fr_tweaks') .'/js/fr_tweaks.js', array('type' => 'file', 'scope' => 'footer'));
		$form['#submit'][] = 'fr_tweaks_dvr_form_submit';

		break;
	case 'alarm_node_form':

		drupal_add_js(drupal_get_path('module', 'fr_tweaks') .'/js/fr_tweaks_dvr_zones.js', array('type' => 'file', 'scope' => 'footer'));
		$dvrs = array();
		$dvrs['none'] = 'none';
		if(!empty($form_state['build_info']['args'][0]->field_cust_alarm_group_owner['und'][0]['target_id'])){
			$target_account = $form_state['build_info']['args'][0]->field_cust_alarm_group_owner['und'][0]['target_id'];
			$account_dvrs = fr_tweaks_query_dvrs($target_account);
			if($account_dvrs){
				foreach($account_dvrs as $nid => $data){
					if(!empty($data->dvr_title)){
						$dvrs[$data->dvr_title.':'.$nid.':'.$target_account] = $data->dvr_title;
					}
				}
			}
		}

		//for javascript focus
		if(!empty($form['field_alarm_zone_alias']['und'])){
			foreach($form['field_alarm_zone_alias']['und'] as $delta => $field){
				if(is_array($field) && is_numeric($delta)){
					$form['field_alarm_zone_alias']['und'][$delta]['#prefix'] = '<div class="alarm-zone-alias">';
					$form['field_alarm_zone_alias']['und'][$delta]['#suffix'] = '</div>';
				}
			}
		}

		$form['select_dvr_wrapper'] = array(
			'#type' => 'fieldset',
			'#title' => 'DVR ALARM ZONES',
			'#collapsed' => FALSE,
			'#collapsible' => TRUE,
			'#tree' => TRUE,
			'#weight' => 101,
		);
		$form['select_dvr_wrapper']['dvr_zones'] = array(
			'#type' => 'select',
			'#options' => $dvrs,
			'#title' => t('DVR Options'),
			'#description' => t('To map a DVR to an alarm zone, Select an alarm zone field and then click on one of the DVRs Below.'),
		);

		$groups = &$form['#group_children'];
		$groups += array('select_dvr_wrapper' => 'group_alarm_settings');

		break;
	}
	return $form;
}


function fr_tweaks_form_submit(&$form, $form_state){
	$base = $form_state['input']['submitted'];
	$body = '<html>
			<body>
				<p>A new lead lead has been submitted from <strong>'.$base['name'].'</strong> On '.date('Y-m-d').'.</p><br/>
				<p>Lead Contact Info:<br/>
				Primary Phone: '.$base['primary_phone'].'<br/>
				Email: '.$base['email'].'<br/>
				City: '.$base['city'].'<br/>
				State: '.$base['state'].'<br/>
				Subject: '.$base['subject'].'<br/>
				Message: '.$base['message'].'
				</p>
			</body>
		</html>';
	define('GUSER', 'no-reply@fortifiedsecurityservices.com'); // GMail username
	define('GPWD', 'FortifieD!'); // GMail password
	global $error;
	$mail = new PHPMailer();  // create a new object
	$mail->IsSMTP(); // enable SMTP
	$mail->SMTPDebug = 0;  // debugging: 1 = errors and messages, 2 = messages only
	$mail->SMTPAuth = true;  // authentication enabled
	$mail->SMTPSecure = 'ssl'; // secure transfer enabled REQUIRED for GMail
	$mail->Host = 'smtp.gmail.com';
	$mail->Port = 465;
	$mail->Username = GUSER;
	$mail->Password = GPWD;
	$mail->SetFrom('no-reply@fortifiedsecurityservices.com', 'Fortified Security Services');
	$mail->Subject = 'You have a new web lead From '.$base['name'].'';
	$mail->Body = $body;
	$mail->IsHTML(true);
	$mail->AddAddress('info@fortifiedsecurityservices.com');
	if(!$mail->Send()) {
		$error = 'Mail error: '.$mail->ErrorInfo;
		$success = 'Failed to notify Customer';
	} else {
		$error = 'Message sent!';
		$success = 'Customer has been notified';
	}
}




/*
 * @ hook_block_info
 *
 */
function fr_tweaks_block_info(){
	$blocks['front_page_markup'] = array(
		'info' => t('Front Page Markup'),
		'cache' => DRUPAL_NO_CACHE,
	);
	return $blocks;
}




/*
 * @ hook_block_view
 *
 */
function fr_tweaks_block_view($delta = ''){
	switch($delta){
	case'front_page_markup':

		$block['content'] = _fr_load_content();

		break;
	}
	return $block;
}



/*
 * @ query database for front_page_text
 *
 */
function _fr_load_content(){
	$content = array();

	$query = new EntityFieldQuery;
	$query->entityCondition('entity_type', 'node')
	->entityCondition('bundle', 'front_page_text')
	->propertyCondition('status', 1);
	$results = $query->execute();

	if(!empty($results['node'])){

		$content['wrapper'] = array(
			'#type' => 'container',
			'#attributes' => array(
				'class' => array('footer-first-markup-wrapper', 'large-12', 'columns'),
			),
		);
		$nodes = $results['node'];
		foreach($nodes as $key => $node){
			$node_object = node_load($node->nid);
			$content['wrapper'][$node->nid] = array(
				'#type' => 'markup',
				'#markup' => render(node_view($node_object, $view_mode = 'teaser', $langcode = NULL)),
				'#prefix' => '<div class="front-page-text">',
				'#suffix' => '</div>',
			);
		}
	}
	return $content;
}




function fr_tweaks_page_alter(&$page){
	if(!empty($page['content']['system_main']['default_message'])){
		unset($page['content']['system_main']['default_message']);
	}
	return $page;
}