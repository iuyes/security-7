<?php


/**
 * hook_field_info
 *
 */
function fr_virtual_field_info() {
	return array(
		'fr_virtual' => array(
			'label' => t('Fortified Virtual'),
			'description' => t("Virtual"),
			'default_widget' => 'fr_virtual_widget',
			'default_formatter' => 'fr_virtual_formatter',
		),
	);
}


function fr_virtual_menu(){
	$items = array();
	$items['ajax/files/%/%/%/%'] = array(
		'page callback' => '_fr_virtual_ajax_load_files',
		'page arguments' => array(2, 3, 4, 5),
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);

	return $items;
}



function fr_vitual_select_dvr($form, &$form_state){
	$cuid = $form_state['values']['field_cust_alarm_group_owner']['und'][0]['target_id'];
	$get_dvrs = _find_customer_dvrs($cuid);
	$options = !empty($get_dvrs) ? $get_dvrs : array( 1 => 'There are not any DVRS for this customer!');
	$info = field_info_field('field_vt_dvr');
	$info['settings']['allowed_values'] += $options;
	field_update_field($info);
	$form['field_vt_dvr']['und']['#options'] = $options;
	return $form['field_vt_dvr'];
}


//get all dvrs belonging to a customer
function _find_customer_dvrs($uid){
	$dvr_data = array();
	$query = new EntityFieldQuery;
	$query->entityCondition('entity_type', 'node')
	->entityCondition('bundle', 'dvr')
	->fieldCondition('field_cust_alarm_group_owner', 'target_id', $uid, '=');
	$result = $query->execute();
	if(!empty($result['node'])){
		foreach($result['node'] as $key => $value){
			$node = node_load($value->nid);
			$dvr_data[$node->nid] = $node->title;
		}
	}
	return $dvr_data;
}






function _load_customer_data(&$form, $form_state){
	return $form['field_vt_customer'];
}



//ajax load tour files callback
function _fr_virtual_ajax_load_files($ajax = 'ajax', $file_type = NULL, $remove = FALSE, $filename = NULL){
	if($ajax == 'ajax'){
		$tmp = FALSE;
		if($remove == 'remove' && $filename && $file_type){
			switch($file_type){
			case 'image':
				$unlink = unlink('public://tmp/tour_images/'.$filename.'');
				$tmp = TRUE;
				break;
			case 'video':
				unlink('public://tmp/tour_videos/'.$filename.'');
				break;
			}
		}
		$files = _fr_virtual_ajax_load_file_directory($tmp);
		$commands[] = ajax_command_replace('#tour-ajax-replace-files', $files);
		//return the commands
		$page = array('#type' => 'ajax', '#commands' => $commands);
		ajax_deliver($page);
	}else{
		$output = t("Please enable javascript in your browser and refresh the form.");
		return $output;
	}
}



function _fr_virtual_ajax_load_file_directory($tmp = FALSE){
	$upload = new FortifiedAjaxTourFiles($tmp);
	$tmp = !$temp ? $upload->uploadFiles() : $upload->loadTmpFiles();
	if(empty($upload->errors)){
		$files = '<div class="ajax-tour-files" id="tour-ajax-replace-files">';
		if(!empty($upload->files) && isset($upload->files)){
			foreach($upload->files as $type => $values){
				switch($type){
				case 'tour_images/':
					if(is_array($values) && !empty($values)){
						foreach($values as $delta => $file){
							$path = file_create_url($file->uri);
							$remove = '<a href="/ajax/files/nojs/image/remove/' . $file->filename . '" class="ajax-remove-image use-ajax">Remove</a>';
							$files .= '<div class="ajax-tour-file">';
							$files .= '<img src="'. $path .'" class="ajax-tour-image" />';
							$files .= '<div class="ajax-remove">' . $remove . '</div>';
							$files .= '</div>';
						}
					}
					break;

				}
			}
		}
	}
	$files .= '</div>';
	return $files;
}




/**
 * hook_field_validate
 *
 */
function fr_virtual_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
	foreach ($items as $delta => $item) {

	}

}

/**
 * hook_field_is_empty
 *
 */
function fr_virtual_field_is_empty($item, $field) {

	$is_empty = empty($item['tour_files']['upload_type']) ? TRUE : FALSE;
	return $is_empty;
}

/**
 * hook_field_widget_info
 *
 */
function fr_virtual_field_widget_info() {
	return array(
		'fr_virtual_widget' => array(
			'label' => t('Virtual Tours'),
			'field types' => array('fr_virtual'),
		),
	);
}


/**
 * hook_field_widget_form
 *
 */
function fr_virtual_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
	$element = array();
	//Default values
	switch ($instance['widget']['type']) {
	case 'fr_virtual_widget':
		$field_name = 'field_vt_tour_files';
		$default_values = _fr_virtual_build_default_values($items, $delta);
		$manager = new stdClass;

		if(!empty($form_state['build_info']['args'][0]->field_vt_tour_files['und'][0])){

			drupal_add_js(drupal_get_path('module', 'fr_virtual') .'/fr_virtual_files.js', array('type' => 'file', 'scope' => 'footer'));
			drupal_add_js(drupal_get_path('module', 'fr_virtual') .'/fr_virtual.js', array('type' => 'file', 'scope' => 'footer'));
			
			$show_files = array();
			$form_state['build_info']['args'][0]->field_vt_tour_files['und'][0]['upload_type'] = array('image', 'video');
			$current = $form_state['build_info']['args'][0]->field_vt_tour_files['und'][0]['upload_type'];
			$current_files = $form_state['build_info']['args'][0]->field_vt_tour_files['und'][0];
			$element['current_files'] = array(
				'#type' => 'fieldset',
				'#title' => t("Edit file ID's (ADVANCED)"),
				'#collapsed' => TRUE,
				'#collapsible' => TRUE,
				'#weight' => -100,
			);
			$element['files'] = array(
				'#type' => 'fieldset',
				'#title' => t('Current Tour Files'),
				'#collapsed' => FALSE,
				'#collapsible' => TRUE,
				'#tree' => TRUE,
				'#weight' => -100,
			);

			foreach($current as $key => $files){
				$type = $files['upload_type'];
				$manager->current_files[] = $files;
				$manager->$files = explode(',', $current_files[''.$files.'_files']);

				foreach($manager->$files as $key => $file){
					if($file != 0){
						$load_file = file_load($file);
						$file_name = $load_file->filename;
						$stream = file_create_url($load_file->uri);
						$view_file = fr_virtual_file_view($load_file->fid);
						$view = $view_file['image'];
						switch($load_file->filemime){
						case'image/jpg':
						case'image/jpeg':
						case'image/x-ms-bmp':
						case'image/png':
						case'image/gif':

							$element['files'][$file] = array(
								'#type' => 'markup',
								'#markup' => '<label style="width:30%; float:left;">Picture id #'.$file.'</label>
		    				  <div style="width:30%;"><strong>Remove</strong> <input type="checkbox" class="managed_image_files" value="'.$file.'"/></div>'.$view.'',
								'#prefix' => '<div class="" id="'.$file.'"style="border:1px solid #999;border-bottom:none;padding:10px;">',
								'#suffix' => '</div>',
							);

							break;

						case'video/mp4':
						case'video/avi':

							$video = '<a href="'.$stream.'" id="'.$file.''.$key.'" class="flowplayer"></a>';
							$element['files'][$file] = array(
								'#type' => 'markup',
								'#markup' => '<div id="'.$file.'" style="border:1px solid #999;border-bottom:none;padding:10px;">
		    				  <label style="width:30%; float:left;">Video id #'.$file.'</label>
		    				  <div style="width:30%;"><strong>Remove</strong> <input type="checkbox" class="managed_video_files" value="'.$file.'"/></div>'.$video.'</div>',
							);
							flowplayer_add(''.$file.''.$key.'', array(
									'clip' => array(
										'autoPlay' => FALSE, // Turn autoplay off
										'linkUrl' => $stream, // When clicked on
									),
								));

							break;
						}

					}
				}
			}
			$element['files']['remove_images'] = array(
				'#type' => 'markup',
				'#markup' => '<input type="button" class="form-submit" id="remove_managed_images" value="Remove Selected Image(s)" />',
			);
			$element['files']['remove_videos'] = array(
				'#type' => 'markup',
				'#markup' => '<input type="button" class="form-submit" id="remove_managed_videos" value="Remove Selected Video(s)" />',
			);
			foreach($current as $key => $value){
				$element['current_files'][$key] = array(
					'#type' => 'textfield',
					'#maxlength' => 900,
					'#title' => t($value .' Files'),
					'#value_callback' => 'map_files_value',
					'#default_value' => implode(',', $manager->$value),
					'#weight' => 10000,
				);
			}
		}
		
		$element['tour_files'] = array(
			'#type' => 'fieldset',
			'#title' => t('Edit Tour Folder Paths (ADVANCED)'),
			'#collapsed' => TRUE,
			'#collapsible' => TRUE,
			'#tree' => TRUE,
			'#weight' => -100,
		);
		$element['tour_files']['upload_type'] = array(
			'#type' => 'radios',
			'#title' => t('Upload Type'),
			'#default_value' => 'pic',
			'#weight' => -95,
			'#options' => array(
				'video' => 'Video',
				'pic' => 'Snap / Picture',
			),
		);
		$element['tour_files']['image_file_path'] = array(
			'#type' => 'textfield',
			'#title' => t('Picture(s)'),
			'#weight' => '-90',
			'#description' => t('The folder in which this customers images lie. Please do not change this if you do not know what your doing :)'),
			'#default_value' => !empty($default_values['image_file_path']) ? $default_values['image_file_path'] : 'tour_images/',
			'#states' => array(
				'visible' => array(
					':input[name="'.$field_name.'[und][0][tour_files][upload_type]"]' => array('value' => 'pic'),
				),
			),
		);
		$element['tour_files']['video_file_path'] = array(
			'#type' => 'textfield',
			'#title' => t('Video(s)'),
			'#weight' => '-90',
			'#description' => t('The folder in which this customers video lie. Please do not change this if you do not know what your doing :)'),
			'#default_value' => !empty($default_values['video_file_path']) ? $default_values['video_file_path'] : 'tour_videos/',
			'#states' => array(
				'visible' => array(
					':input[name="'.$field_name.'[und][0][tour_files][upload_type]"]' => array('value' => 'video'),
				),
			),
		);
	}

	return $element;

}



function test_validate($element, &$form_state){
	$form_state['field']['field_vt_dvr']['und']['instance']['widget']['settings']['allowed_values'] = array(0 => 'test', 1 => 'ttttest');
	return $element;
}




function _populate_tour_fields(&$form, $cust){
	//$profile_load = profile2_load_by_user($cust, $type_name = NULL);
	$user = user_load($cust);
	$name = $user->name;
	$profile = current(profile2_load_by_user($cust, $type_name = NULL));
	$pid = !empty($profile->pid) ? $profile->pid : NULL;
	if(!empty($pid)){
		$group_id = !empty($profile->field_cust_alarm_group_owner['und'][0]['target_id']) ? $profile->field_cust_alarm_group_owner['und'][0]['target_id'] : NULL;
		$form['field_cust_alarm_group_owner']['und'][0]['target_id']['#default_value'] = $name.' ('.$group_id.')';
		$cust_dvrs = _find_customer_dvrs($group_id);
		$form['field_vt_dvr']['und']['#options'] = !empty($cust_dvrs) ? $cust_dvrs : array(1 => 'No DVR Found');
	}
	$time = date('Y-m-d h:i:s');
	$form['title']['#default_value'] = $name;
	$form['field_vt_customer']['und'][0]['target_id']['#default_value'] = $name.' ('.$user->uid.')';
	$form['field_vt_folder_title']['und'][0]['value']['#default_value'] = $name;
	return array(
		'uid' => $cust,
		'group' => $group_id,
	);
}



function fr_virtual_form_alter(&$form, &$form_state, $form_id){
	switch($form_id){
	case'fortified_incident_reports_node_form':
	case'fortified_events_node_form':
	case'fortified_virtual_tours_node_form':
		//include ajax
		drupal_add_library('system', 'drupal.ajax');
		drupal_add_library('system', 'jquery.form');
		$form['#attatched'][] = drupal_add_library('system', 'drupal.ajax');
		$form['#attatched'][] = drupal_add_library('system', 'jquery.form');

		if(isset($_GET['cust'])){
			$cust_data = _populate_tour_fields($form, $_GET['cust']);
			$cust = !empty($cust_data['uid']) ? $cust_data['uid'] : NULL;
			$group_id = !empty($cust_data['group']) ? $cust_data['group'] : NULL;
			//$form = !empty($cust_data['form']) ? $cust_data['form'] : $form;
		}

		drupal_add_js(drupal_get_path('module', 'fr_virtual') .'/fr_virtual_select_dvr.js', array('type' => 'file', 'scope' => 'footer'));
		drupal_add_css(drupal_get_path('module', 'fr_virtual') .'/fr_virtual.css', array('type' => 'file', 'scope' => 'footer'));

		$form['field_vt_dvr']['und']['#states'] = array(
			'visible' => array(
				':input[name="field_cust_alarm_group_owner[und][0][target_id]"]' => array('empty' => FALSE),
			),
		);

		hide($form['field_vt_tour_saved_status']);
		$form['field_vt_dvr']['und']['#prefix'] = '<div id="select-dvr" >';
		$form['field_vt_dvr']['und']['#suffix'] = '</div>';
		$form['field_vt_dvr']['und']['#after_build'][] = 'test_validate';
		$form['field_cust_alarm_group_owner']['und'][0]['target_id']['#ajax'] = array(
			'callback' => 'fr_vitual_select_dvr',
			'wrapper' => 'select-dvr',
			'method' => 'replace',
			'effect' => 'fade',
		);
		$form['field_vt_customer']['und']['#prefix'] = '<div id="select-cust" >';
		$form['field_vt_customer']['und']['#suffix'] = '</div>';
		$form['field_vt_customer']['und'][0]['target_id']['#ajax'] = array(
			'callback' => '_load_customer_data',
			'wrapper' => 'select-cust',
			'method' => 'replace',
			'effect' => 'fade',
		);


		if(!empty($form_state['values']['field_vt_customer'])){
			$uid = $form_state['values']['field_vt_customer']['und'][0]['target_id'];
			$has_account = user_load($uid);
			$base_path = '.';
			$path = '';
			switch($form['type']['#value']){
			case 'fortified_virtual_tours':
				$path = '/node/add/fortified-virtual-tours';
				break;
			case 'fortified_incident_reports':
				$path = '/node/add/fortified-incident-reports';
				break;
			case 'fortified_events':
				$path = '/node/add/fortified-events';
				break;
			}
			$url = $base_path . $path;
			if(!empty($has_account->uid)){
				$query = array(
					'query' => array(
						'cust' => $uid,
					),
				);
				ctools_include('ajax');
				ctools_add_js('ajax-responder');
				$commands[] = ctools_ajax_command_redirect($url, 0, $query);
				print ajax_render($commands);
				exit;
			}
		}

		if(!empty($form['field_vt_tour_date']['und'][0]['#default_value']['value'])){
			$dates = $form['field_vt_tour_date']['und'][0]['#default_value']['value'];
			$tz = new DateTimeZone('America/Phoenix');
			$date = $dates;
			$date_offset = $tz->getOffset(new DateTime($date));
			$new_date = strtotime($date) + $date_offset;
			$datetime2 = date('Y-m-d H:i:s', $new_date);
			$correct_dates = $datetime2;
			$new = strtotime($correct_dates);
			$form['field_vt_tour_date']['und'][0]['value'] = $new;
		}

		//to be replace with our ajax files
		$form['field_vt_tour_files']['und'][0]['temp_files'] = array(
			'#type' => 'markup',
			'#markup' => '',
			'#weight' => -100,
			'#prefix' => '<div id="tour-ajax-replace-files">',
			'#suffix' => '</div>',
		);
		//for our ajax upload
		$form['field_vt_tour_files']['und'][0]['ajax_files'] = array(
			'#type' => 'markup',
			'#markup' => '<div class="tours-ajax-remove-wrapper">
			<a href="/ajax/files/nojs/FALSE/FALSE/FALSE" class="form-submit fr-virtual-ajax-upload use-ajax">Upload Files</a></div>',
			'#weight' => -101,
		);
		break;
	}
}


/**
 * Build the default values for our form
 *
 */
function _fr_virtual_build_default_values($items, $delta) {
	$default_values = array();
	if(empty($items[$delta])){ return NULL; }else{
		foreach($items[$delta] as $field => $value){
			$default_values[$field] = $value;
		}
	}

	return $default_values;

}





/**
 * Implements hook_field_presave().
 */
function fr_virtual_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
	foreach ($items as $delta => $value) {
		_fr_virtual_process($items[$delta], $delta, $field, $entity);

	}
}




/**
 * Prepares the item description and elementat for storage.
 */
function _fr_virtual_process(&$item, $delta = 0, $field, $entity) {
	$item = _fr_virtual_flatten_values ($item, $entity);
}

function _fr_virtual_flatten_values ($item, $entity) {
	$customer = $entity->field_cust_alarm_group_owner['und'][0]['target_id'];
	$tour_files = new fortifiedTours($item);
	$tour_files->field_types();
	$tour_files->save_user_files($customer, $entity);
	$video_list = $tour_files->updated_files['videos'];
	$image_list = $tour_files->updated_files['images'];
	$video_list = empty($video_list) ? 0 : $video_list;
	$image_list = empty($image_list) ? 0 : $image_list;
	$item['image_files'] = $image_list;
	$item['video_files'] = $video_list;
	$item['upload_type'] = 'image,video';
	$item['video_file_path'] = $tour_files->video_file_path;
	$item['image_file_path'] = $tour_files->image_file_path;
	unset($item['tour_files']);
	unset($item['current_files']);

	return $item;
}


/**
 * Class for bulding the files
 *
 */
class fortifiedTours{

	const TMP_DIRECTORY = 'public://tmp/';
	public $directory;

	function __construct($item){
		//set up the image and video current file sand paths
		$this->current_images = !empty($item['current_files'][0]) ? $item['current_files'][0] : 0;
		$this->current_videos = !empty($item['current_files'][1]) ? $item['current_files'][1] : 0;
		$this->image_file_path = !empty($item['tour_files']['image_file_path']) ? $item['tour_files']['image_file_path'] : 0;
		$this->video_file_path = !empty($item['tour_files']['video_file_path']) ? $item['tour_files']['video_file_path'] : 0;
	}

	// this take sthe current files if any and the new files and build/uploads them into the database.
	public function field_types(){

		$current_images = array($this->current_images);
		$current_videos = array($this->current_videos);
		$image_path = $this->image_file_path;
		$video_path = $this->video_file_path;
		$this->new_files['videos'] = empty($video_path) ? $current_videos : $this->get_files($video_path, 'videos');
		$this->new_files['images'] = empty($image_path) ? $current_images : $this->get_files($image_path, 'images');
		$new_files = !empty($this->files) ? $this->files : NULL;

		if(!empty($new_files)){
			$update_files = array();
			foreach($new_files as $type => $file){

				if(count($file) == 1){
					switch($type){
					case'images':
						$update_files[$type] = $this->current_images != 0 ? ''.$this->current_images.','.implode(',', $this->files['images']).'' : $this->files['images'][0];
						break;
					case'videos':
						$update_files[$type] = $this->current_videos != 0 ? ''.$this->current_videos.','.implode(',', $this->files['videos']).'' : $this->files['videos'][0];
						break;
					}
				}elseif(count($file) > 1){
					switch($type){
					case'images':
						$update_files[$type] = $this->current_images != 0 ? ''.$this->current_images.','.implode(',', $this->files['images']).'' : implode(',', $this->files['images']);
						break;
					case'videos':
						$update_files[$type] = $this->current_videos != 0 ? ''.$this->current_videos.','.implode(',', $this->files['videos']).'' : implode(',', $this->files['videos']);
						break;
					}
				}
			}
		}
		if(empty($new_files['images'])){
			$update_files['images'] = ''.$this->current_images.'';
		}
		if(empty($new_files['videos'])){
			$update_files['videos'] = ''.$this->current_videos.'';
		}

		$this->updated_files = $update_files;
		return $update_files;
	}
	// function for saving the images and videos FID to the user
	private function get_files($path, $type){
		$this->directory = self::TMP_DIRECTORY . $path;
		if(!empty($this->directory)){
			$this->scan = array_diff(scandir($this->directory), array('..', '.'));
			if(!empty($this->scan)){
				foreach($this->scan as $file){
					if (isset($file)) {
						$contents = file_get_contents($this->directory . $file);
						$this->file_temp = file_save_data($contents, 'private://' . $file, FILE_EXISTS_RENAME);
						$this->files[$type][] = $this->file_temp->fid;
						if($this->file_temp){
							unlink($this->directory . $file);
						}
					}
				}
			}
		}
	}


	public function save_user_files($customer, $node){
		if($node->nid){
			$files = !empty($this->files) ? $this->files : NULL;
			if(!empty($files)){
				foreach($files as $type => $parent){
					foreach($parent as $key => $file){
						// Load the file via file.fid.
						$file_save = file_load($file);
						$file_save->uid = $customer;
						// Change status to permanent.
						$file_save->status = FILE_STATUS_PERMANENT;
						// Save.
						file_save($file_save);
						// Record that the module (in this example, user module) is using the file.
						file_usage_add($file_save, 'fr_virtual', 'field', $node->nid);
					}
				}
			}
		}
	}
	// function for saving the "new" images and videos FID to the user if this node is ever updated
	public static function save_user_files_insert($customer, $pages, $node){
		// Load the file via file.fid.
		$files = array();
		if(!empty($pages[0]['image_files'])){
			$files['images'] = explode(',', $pages[0]['image_files']);
		}
		if(!empty($pages[0]['video_files'])){
			$files['videos'] = explode(',', $pages[0]['video_files']);
		}
		foreach($files as $type => $parent){
			foreach($parent as $key => $file){
				// Load the file via file.fid.
				$file_save = file_load($file);
				$file_save->uid = $customer;
				// Change status to permanent.
				$file_save->status = FILE_STATUS_PERMANENT;
				// Save.
				file_save($file_save);
				// Record that the module (in this example, user module) is using the file.
				file_usage_add($file_save, 'fr_virtual', 'field', $node->nid);
			}
		}
	}

	public static function sendEmail($to, $type, $nid, $title){
		$customer = user_load($to);

		$body = '<html>
			<body>
				<p>A new Fortified '.$type.' has been submitted For <strong>'.$customer->name.'</strong> - '.date('Y-m-d').'.</p><br/>
				<p>If this email does not pertain to you, please delete it and contact us immediately.</p>
				<p>For Any Questions or technical support call Fortified Security Services at (520) 886-6419 or email us at info@fortifiedsecurityservices.com.</p>
			</body>
		</html>';
		//<p>Click <a href="http://www.fortifiedsecurityservices.com/node/'.$nid.'">here</a> to login and view this '.$type.'.</p><br/>
		define('GUSER', 'no-reply@fortifiedsecurityservices.com'); // GMail username
		define('GPWD', 'FortifieD!'); // GMail password
		global $error;
		$mail = new PHPMailer();  // create a new object
		$mail->IsSMTP(); // enable SMTP
		$mail->SMTPDebug = 0;  // debugging: 1 = errors and messages, 2 = messages only
		$mail->SMTPAuth = true;  // authentication enabled
		$mail->SMTPSecure = 'ssl'; // secure transfer enabled REQUIRED for GMail
		$mail->Host = 'smtp.gmail.com';
		$mail->Port = 465;
		$mail->Username = GUSER;
		$mail->Password = GPWD;
		$mail->SetFrom('no-reply@fortifiedsecurityservices.com', 'Fortified Security Services');
		$mail->Subject = 'You have a new Fortified '.$type.'';
		$mail->Body = $body;
		$mail->IsHTML(true);
		$mail->AddAddress($customer->mail);
		$mail->AddAddress('info@fortifiedsecurityservices.com');
		if(!empty($title)){
			$folder = strtolower($title);
			$title = str_ireplace(" ", "_", $folder);
			$mail->AddAttachment('sites/default/files/fortified/tour_pdfs/'. $title .'.'. $nid .'.pdf');
		}
		if(!$mail->Send()) {
			$error = 'Mail error: '.$mail->ErrorInfo;
			$success = 'Failed to notify Customer';
		} else {
			$error = 'Message sent!';
			$success = 'Customer has been notified';
		}
		return $error;
	}
}




//our ajax upload class
//handles uploading images and videos
//to our temporary directory
class FortifiedAjaxTourFiles{

	private $directories = array();
	public $errors = array();
	public $files;
	const TMP_DIRECTORY = 'public:///tmp/';
	const TOUR_IMAGE_DIR = 'tour_images/';
	const TOUR_VIDEO_DIR = 'tour_videos/';
	const TOUR_PDF_DIR = 'tour_pdfs';
	//cant use public:// i dont know why
	const TOUR_DIRECTORY = './sites/default/files/fortified/';
	public $tour_directory;

	//construct
	public function __construct($tmp = FALSE){
		$this->tour_directory = $tmp ? self::TMP_DIRECTORY : self::TOUR_DIRECTORY;
		$this->directories = array(
			self::TOUR_IMAGE_DIR => $this->tour_directory . self::TOUR_IMAGE_DIR,
			self::TOUR_VIDEO_DIR => $this->tour_directory . self::TOUR_VIDEO_DIR,
		);
		if(!$tmp){
			$this->chmodDir($this->directories);
		}
	}


	//function for giving us the correct permissions to write to files
	private function chmodDir($directories = array()){
		foreach($directories as $type => $path){
			$old_umask = umask(0);
			if(!$chmod = chmod($path, 0777)){
				$this->errors[$type] = t('Cannot chmod ' . $path);
			}
		}
	}


	//function to grab the desired files and move them
	//to a temporary folder
	public function uploadFiles(){
		$this->files = new StdClass();
		foreach($this->directories as $type => $path){
			$scan_files = array_diff(scandir($path), array('..', '.'));
			if(!empty($scan_files)){
				foreach($scan_files as $delta => $file){
					if (isset($file)) {
						$file_contents = file_get_contents($path . $file);
						$upload_file = file_unmanaged_save_data($file_contents, self::TMP_DIRECTORY . $type . $file, FILE_EXISTS_REPLACE);
						if($upload_file){
							$this->files->{$type}[$delta]->uri = $upload_file;
							$this->files->{$type}[$delta]->filename = $file;
						}else{
							$this->errors['upload'][$path] = t('Cannot move ' . $path . ' to ' . self::TOUR_DIRECTORY .'');
						}
					}
				}
			}
		}
	}



	public function loadTmpFiles(){
		foreach($this->directories as $type => $path){
			$scan_files = array_diff(scandir($path), array('..', '.'));
			if(!empty($scan_files)){
				foreach($scan_files as $delta => $file){
					$this->files->{$type}[$delta]->uri = self::TMP_DIRECTORY . $type . $file;
					$this->files->{$type}[$delta]->filename = $file;
				}
			}
		}
	}

}







/**
 * hook_field_elementatter_info()
 *
 */

function fr_virtual_field_formatter_info() {
	return array(
		'fr_virtual_formatter' => array(
			'label' => t('Virtual Tours formatter'),
			'field types' => array('fr_virtual'),
		),
	);
}






/**
 * hook_field_formatter_view()
 *
 */
function fr_virtual_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
	$element = array();

	switch ($display['type']) {
	case 'fr_virtual_formatter':

		drupal_add_js(drupal_get_path('module', 'fr_virtual') .'/fr_virtual.js', array('type' => 'file', 'scope' => 'footer'));
		global $user;
		$objects = array();
		$customer_uid = $entity->field_cust_alarm_group_owner['und'][0]['target_id'];
		$auth = array(3 => 'administrator', 8 => 'supervisor', 9 => 'account_manager', 'central station');
		$account_type = array_intersect(array_keys($auth), array_keys($user->roles));
		$account_info = fr_tweaks_load_user_profile2_account_id($user, 9);
		$auth = array('administrator', 'supervisor', 'guard', 'central station');
		if($account_info['account_node_id'] != $customer_uid && !array_intersect($auth, $user->roles)){
			$path = '../user';
			$options = array('');
			$http_response_code = 302;
			drupal_goto($path);
		}
		$objects['back_wrapper'] = array(
			'#type' => 'container',
			'#attributes' => array(
				'class' => array('back', 'large-12', 'columns'),
			),
			'#weight' => -100,
		);

		$objects['back_wrapper']['enlarge'] = array(
			'#type' => 'markup',
			'#markup' => 'Enlarge Images',
			'#prefix' => '<div class="enlarge button radius small left" data-reveal-id="imageModal">',
			'#suffix' => '</div>',
			'#weight' => -100,
		);

		$objects['back_wrapper']['back'] = array(
			'#type' => 'markup',
			'#markup' => '<a class="button radius small" href="../account">Back To My Account</a>',
			//'#prefix' => '<a class="flowplayer eight columns" id="player" style="float:left">',
			//'#suffix' => '</a>',
			'#weight' => -100,
		);

		$objects['tour_images'] = array(
			'#type' => 'container',
			'#attributes' => array(
				'class' => array('tour-images', 'large-12', 'columns'),
			),
			'#weight' => -97,
		);

		if(!empty($items[0]['current_files'][0])){
			$items[0]['image_files'] = $items[0]['current_files'][0];
		}
		foreach($items as $delta => $fields){
			foreach($fields as $item => $value){
				switch($item){

				case 'current_files':



					break;

				case'image_files':
					if(!empty($value)){
						$explode_images = explode(',', $value);
						foreach($explode_images as $key => $fid){
							$view_file = fr_virtual_file_view($fid);
							$view = $view_file['image'];
							$stream = $view_file['stream'];
							$objects['tour_images'][$key] = array(
								'#theme' => 'link',
								'#text' => $view,
								'#path' => $stream,
								'#options' => array(
									'attributes' => array('target' => '_blank', 'class' => array('vt_tour_pic', 'large-4', 'columns', 'small-4')),
									'html' => TRUE,
								),
							);
						}
					}
					break;

				case'video_files':
					drupal_add_js(drupal_get_path('module', 'fr_virtual') .'/flowplayer.playlist-3.2.10.js',
						array('type' => 'file', 'scope' => 'header', 'weight' => 2));
					if($value){
						$explode_videos = explode(',', $value);
						$i = 1;
						foreach($explode_videos as $key => $fid){
							$num = $i;
							// load and stram the video
							$load_file = file_load($fid);
							$file_name = $load_file->filename;
							$stream = file_create_url($load_file->uri);
							$stram = $load_file->uri;
							$config[] = array(
								'path' => $stream,
								'empty' => 'Play: Video '.$num.'',
								'http' => 'HTTP streaming',
								'em' => ' - '.$load_file->filemime.'',
								'stream' => $stream,
							);
							$i++;
						}

						$objects['video_activate_wrapper'] = array(
							'#type' => 'container',
							'#attributes' => array(
								'class' => array('tour-video', 'large-12', 'columns'),
							),
							'#weight' => -99,
						);

						$objects['video_activate_wrapper']['video_activate'] = array(
							'#type' => 'markup',
							'#markup' => '<a data-reveal-id="myVideoModal" class="reveal-link activate-button button radius small">Start Video</a>',
						);
					}
					break;
				}
			}
		}
		break;
	}
	if(!(empty($config))){
		$objects['video_wrapper'] = array(
			'#type' => 'container',
			'#attributes' => array(
				'class' => array('clips', 'large-12', 'columns', 'reveal-modal xxlarge'),
				'id' => array('myVideoModal'),
			),
			'#weight' => -100,
		);
		$objects['video_wrapper']['links_wrapper'] = array(
			'#type' => 'container',
			'#attributes' => array(
				'class' => array('video-links', 'large-4', 'columns', 'clips'),
			),
			'#weight' => -99,
		);

		foreach($config as $delta => $configs){
			$number = $delta + 1;
			$objects['video_wrapper']['links_wrapper']['video'.$delta] = array(
				'#type' => 'markup',
				'#markup' => '
	  	<a href="'.$configs['path'].'" class="'.$delta.' button radius large play-list">'.$configs['empty'].'<span class="http">'.$configs['http'].'</span><em class="em">'.$configs['em'].'</em></a>',
				'#prefix' => '<div class="playlist-wrapper row">',
				'#suffix' => '</div>',
			);
			$objects['video_wrapper']['download'.$delta.''] = array(
				'#type' => 'markup',
				'#markup' => '<a class="downloadVideo" href="#">Download video: '.$number.'</a>
					<input type="hidden" id="download-'.$delta.'" class="download-video" value="'.$stream.'"/>',
				'#prefix' => '<div class="large-8 columns" style="float:right">',
				'#suffix' => '</div>',
				'#weight' => 100,
			);
		}
		$objects['video_wrapper']['tour_video'] = array(
			'#type' => 'markup',
			'#markup' => '',
			'#prefix' => '<div class="close-reveal-modal" style="float:right;">&#215;</div><a class="flowplayer large-7 columns" id="player" style="float:right">',
			'#suffix' => '</a>',
		);

		theme('flowplayer', array(
				'id' => 'player',
				'autoPlay' => false,
				'config' => array(
					'playlist' => true,
					'autoPlay' => FALSE,
					'autoHide' => true,
					'autoBuffering' => true,
				),
				//'playlist' => 'playlist'
			));
	}

	$element[] = $objects;
	return $element;
}








/**
 * function for loading files from the private directory for previewing.
 *
 */
function fr_virtual_file_view($value){
	$uri = file_load($value);
	$url = $uri->uri;
	$file = fr_virtual_file_download($url);
	$stream = file_create_url($url);
	$file['path'] = $url;
	$view_file = theme('image', $file);
	return array('image' => $view_file, 'stream' => $stream);
}



/**
 * function for loading files from the private directory for previewing.
 *
 */
function fr_virtual_file_download($uri) {
	$file = file_load(fr_virtual_get_fid_by_uri($uri));
	$headers = file_get_content_headers($file);
	return $headers;
}



function _load_file_by_fid($fid){
	$load_file = file_load($fid);
	$file_name = $load_file->filename;
	$stream = file_create_url($load_file->uri);
	$view_file = fr_virtual_file_view($fid);
	return $view_file;
}





/**
 * function for loading files from the private directory for previewing.
 *
 */
function fr_virtual_get_fid_by_uri($uri) {
	$sql = "SELECT fid FROM {file_managed}
            WHERE uri = :uri";
	$result = db_query($sql, array(':uri' => $uri));
	foreach ($result as $record) {
		return $record->fid;
	}
}


function fr_virtual_node_submit($node, $form, &$form_state){
	if($node->nid){
		switch($node->type){
		case 'fortified_virtual_tours':
		case'fortified_incident_reports':
		case'fortified_events':
			if(!empty($node->field_vt_notifications['und'][0]['value']) && $node->field_vt_notifications['und'][0]['value'] == 'email'){
				$to = $node->field_cust_alarm_group_owner['und'][0]['target_id'];
				$nid = $node->nid;
				$type = _get_type($node->type);
				//generate pdf
				pdf_using_mpdf_api(drupal_render(node_view($node, 'full')), $node->title, $node->nid);
				$send_email = fortifiedTours::sendEmail($to, $type, $nid, $node->title);
			}
			break;
		}
	}
}



function _get_type($tour_type){
	switch($tour_type){
	case 'fortified_virtual_tours':
		$type = 'Virtual Tour';
		break;
	case'fortified_incident_reports':
		$type = 'Incident Report';
		break;
	case'fortified_events':
		$type = 'Event';
		break;
	}

	return $type;

}

/**
 * hook_node_insert()
 *
 */
function fr_virtual_node_insert($node){
	if($node->nid){
		$positions = array();
		switch($node->type){
		case 'fortified_virtual_tours':
		case'fortified_incident_reports':
		case'fortified_events':
			$pages = ($node->field_vt_tour_files[$node->language]) ? $node->field_vt_tour_files[$node->language] : NULL ;
			if($pages){
				$customer = $node->field_cust_alarm_group_owner['und'][0]['target_id'];
				$test = fortifiedTours::save_user_files_insert($customer, $pages, $node);
				if(!empty($node->field_vt_notifications['und'][0]['value']) && $node->field_vt_notifications['und'][0]['value'] == 'email'){
					$nid = $node->nid;
					$type = _get_type($node->type);
					//generate pdf
					pdf_using_mpdf_api(drupal_render(node_view($node, 'full')), $node->title, $node->nid);
					$to = $node->field_cust_alarm_group_owner['und'][0]['target_id'];
					$send_email = fortifiedTours::sendEmail($to, $type, $nid, $node->title);
				}
			}
			break;
		}
	}
}



function fr_virtual_page_alter(&$page){
	if(!empty($page['content']['system_main']['nodes'])){
		$modal = array();
		$image = array();
		$node_types = array('fortified_virtual_tours', 'fortified_incident_reports', 'fortified_events');
		$content = $page['content']['system_main']['nodes'];
		foreach($content as $key => $value){
			if(!empty($value['#bundle']) && in_array($value['#bundle'], $node_types)){
				if(!empty($value['field_vt_tour_files'][0]['tour_images'])){
					$images = $value['field_vt_tour_files'][0]['tour_images'];
					$modal['image_wrapper'] = array(
						'#type' => 'container',
						'#attributes' => array(
							'class' => array('image-modal-wrapper', 'large-12', 'columns', 'reveal-modal', 'xlarge'),
							'id' => array('imageModal'),
						),
						'#weight' => -100,
					);
					foreach($images as $name => $data){
						if(is_array($data)){
							if(!empty($data['#text'])){
								$image[$name] = $data['#text'];
							}
						}
					}
					if(!empty($image)){
						$modal['image_wrapper']['close'] = array(
							'#type' => 'markup',
							'#markup' => '&#215;',
							'#prefix' => '<div class="close-reveal-modal close-modal">',
							'#suffix' => '</div>',
							'#weight' => -101,
						);
						$modal['image_wrapper']['left_button'] = array(
							'#type' => 'markup',
							'#markup' => '',
							'#prefix' => '<div class="img_modal_left slider">',
							'#suffix' => '</div>',
							'#weight' => 100,
						);
						$modal['image_wrapper']['right_button'] = array(
							'#type' => 'markup',
							'#markup' => '',
							'#prefix' => '<div class="img_modal_right slider">',
							'#suffix' => '</div>',
							'#weight' => 100,
						);
						$modal['image_wrapper']['item_list'] = array(
							'#theme' => 'item_list',
							'#items' => $image,
							'#type' => 'ul',
							'#attributes' => array('id' => 'image-modal-ul'),
							'#container_id' => '',
							'#weight' => -100,
							//'#prefix' => '<section>',
							//'#suffix' => '</section></nav>',
						);
					}
				}
			}
		}
		if(!empty($modal)){
			$page['modal'] = $modal;
		}
	}
	return $page;
}