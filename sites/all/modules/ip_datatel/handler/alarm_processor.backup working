<?php

class IpdatatelProcessEvents {

	public $queryable_accounts;
	public $new_events = array();
	public $all_new_events = array();
	public $custom_trigger_signals = array();
	public $default_events = array();
	public $session;
	public $new_events_overflow = array();
	public $test;

	public function processConstruct($processing_accounts, $account_variables, $uid, $ajax = FALSE, $session = FALSE, $new_event_acount){
		$this->account_variables = $account_variables;
		$this->queryable_accounts = $processing_accounts;
		$this->uid = $uid;
		$this->session = !empty($session) ? $session : strtotime("now");
		$this->ajax = $ajax;
		$this->ajaxRanProcessor = $new_event_acount;
		$events = $this->routEventTriggers($processing_accounts);
		$return = $this->renderAllEvents();
		return array('new_events' => $this->ajaxRanProcessor, 'table' => drupal_render($return), 'test' => $this->test);
	}


	public function updateCustomerVariables($data){
		$uid = $this->uid;
		$update_cust_variables = db_update('customer_variables')
		->fields(array(
				'data' => serialize($data),
			))
		->condition('uid', $uid, '=')
		->execute();
	}

	private function queryEvents($account_data, $trigger){
		$events = array();
		$args = NULL;
		$account_name = $account_data['username'];
		$eventapi = new IpdatatelEventLogs();
		$structure_event_api = $eventapi->constructAccountInformation($account_data, $account_name);
		if($trigger){
			$args = array('event' => $trigger);
		}
		$events = $eventapi->structorEventRequest(array('event' => $trigger));
		if(!empty($events) && $events['status'] == TRUE){
			$events = $events['event_logs'];
		}else{
			$events = NULL;
		}
		return $events;
	}


	private function buildTriggerArgs(&$account){
		$accounts = array();
		if(!empty($account['custom_triggers'])){
			foreach($account['custom_triggers'] as $trig_name => $trig_value){
				$accounts[] = array('account' => $account['username'], 'trigger' => $trig_value->event);
			}
		}
		return $accounts;
	}

	public function routEventTriggers($account_data){
		$events = array();

		if(!empty($account_data) || isset($account_data)){
			foreach($account_data as $account_name => $account_data){
				if(!empty($account_data['custom_triggers'])){
					foreach($account_data['custom_triggers'] as $delta => $trigger){
						switch($trigger->event){
						case'100':
							$events[$trigger->account_name][] =$this->buildProcessData($account_data, $trigger->event, $trigger, $delta);
							break;
						case'200':
							$events[$trigger->account_name][] = $this->buildProcessData($account_data, $trigger->event, $trigger, $delta);
							break;
						case'300':
							$events[$trigger->account_name][] = $this->buildProcessData($account_data, $trigger->event, $trigger, $delta);
							break;
						case'400':
							$events[$trigger->account_name][] = $this->buildProcessData($account_data, $trigger->event, $trigger, $delta);
							break;
						case'500':
							$events[$trigger->account_name][] = $this->buildProcessData($account_data, $trigger->event, $trigger, $delta);
							break;
						case'600':
							$events[$trigger->account_name][] = $this->buildProcessData($account_data, $trigger->event, $trigger, $delta);
							break;
						case'all':
							$events[$trigger->account_name][] = $this->buildProcessData($account_data, NULL, $trigger, $delta);
							break;
						}
					}
				}
			}
			if($this->ranProcessor){
				//$this->cleanOldVariables();
			}
		}
		if(!empty($events)){
			$return_events = $this->firstProcessEvents($events, $this->ajax);
		}
	}


	private function buildProcessData($account_data, $trigger_event, $trigger, $delta){
		$get_events = $this->queryEvents($account_data, $trigger_event);
		$events = is_array($get_events) ? $get_events : '';
		$data = new stdClass();
		$data->events = $events;
		$data->custom_trigger = !empty($trigger) ? $trigger : NULL;
		return $data;
	}


	private function cleanOldVariables(){
		$changed = array();
		$account_variables = &$this->account_variables['processing'];
		foreach($account_variables as $account_name => $account_data){
			if(!empty($this->custom_trigger_signals)){
				if(!empty($account_data['processed_events'])){
					foreach($account_data['processed_events'] as $trig_name => $trig_value){
						if(!array_key_exists($trig_name, $this->custom_trigger_signals[$account_name])){
							unset($account_variables[$account_name]['processed_events'][$trig_name]);
						}
					}
				}
			}
		}
	}




	private function firstProcessEvents($events, $ajax = FALSE){
		$top_3 = array();
		$new_events = array();
		$processed_events = array();
		if(!empty($events)){
			foreach($events as $account_name => $account_data){
				foreach($account_data as $delta => $values){
					if(!empty($values->events) && isset($values->events)){
						$custom_trigger = $values->custom_trigger;
						$top_3 = array_slice($values->events, 0, 3, TRUE);
						$this->custom_trigger_signals[$account_name][$custom_trigger->event] = TRUE;
						foreach($top_3 as $key => $object){
							$matches = 0;
							foreach($object as $event_name => $event_value){
								switch($event_name){
								case'partition':
									if($event_value == $custom_trigger->partition || $custom_trigger->partition == 'all'){
										$matches++;
									}
									break;
								case'signal':

									if(!empty($custom_trigger->signal)){
										if($custom_trigger->signal != 'all'){
											$explode_signal = explode(':', $custom_trigger->signal);
											if(is_array($explode_signal)){
												foreach($explode_signal as $keys => $signal){
													if(strtolower($signal) == strtolower($event_value)){
														$matches++;

													}
												}
											}
										}
										else{
											$matches++;
										}
									}
									break;
								case'extra':
									if($custom_trigger->extra == 'all' || strtolower($custom_trigger->extra) == strtolower($event_value)){
										$matches++;
									}
									break;
								case'zone':
									if($custom_trigger->zone == 'all' || $event_value == $custom_trigger->zone){
										$matches++;
									}
									break;
								}
							}
							if($matches == 4 && !$ajax){
								$account_variables = &$this->account_variables;
								$processed_events[] = $this->buildEventData($account_variables, $object, $custom_trigger);
							}elseif($matches == 4 && $ajax == TRUE){
								$event_date = new DateTime($object->datetime);
								$formated_event_date = strtotime($event_date->format('Y-m-d G:i:s'));
								$new_events[$formated_event_date] = $this->buildEventData($account_variables, $object, $custom_trigger, $ajax, $formated_event_date);
							}
						}
					}
				}
			}
		}
		if(!empty($processed_events)){
			$process = $this->secondProcessEvents($account_variables);
			//$this->ranProcessor = TRUE;
		}
		if(!empty($new_events)){
			krsort($new_events);
			$this->sortNewEvents($new_events);
		}
	}


	private function sortNewEvents($new_events){
		$account_variables = &$this->account_variables;
		if(!empty($new_events)){
			foreach($new_events as $new_event_date => $new_events){
				if($this->ajaxRanProcessor >= 2 && !array_key_exists($new_event_date, $account_variables['processing']['processed_events'])){
					$this->new_events_overflow[$new_event_date] = $new_events;
					krsort($account_variables['processing']['processed_events']);
					$this->ajaxRanProcessor++;
					$account_variables['processing']['processed_events'] = array_slice($account_variables['processing']['processed_events'], 0, 3, TRUE);
				}else if(!array_key_exists($new_event_date, $account_variables['processing']['processed_events'])){
					$account_variables['processing']['processed_events'][$new_event_date] = $new_events;
					$this->new_events[$new_event_date] = TRUE;
					$this->ajaxRanProcessor++;
				}
			}
			krsort($account_variables['processing']['processed_events']);
			//dpm($account_variables);
			//unset($new_events);
		}
		$this->secondProcessEvents($account_variables);
	}




	private function buildEventData(&$account_variables, $object, $custom_trigger, $ajax = FALSE, $return_data = NULL, $date = FALSE){
		$new_events = array();
		$account_variables = &$this->account_variables;
		if(empty($account_variables['processing']['processed_events'])){
			$account_variables['processing']['processed_events'] = array();
		}
		if(!$date){
			$event_date = new DateTime($object->datetime);
			$formated_event_date = strtotime($event_date->format('Y-m-d G:i:s'));
		}
		//$process_events = $this->secondProcessEvent($object, $custom_trigger, $formated_event_date);
		$data = new stdClass();
		$account_name = $custom_trigger->account_name;
		$object->account_name = $account_name;
		$object->session = $this->session;
		if(!$ajax){
			$account_variables['processing']['processed_events'][$formated_event_date] = $object;
			if(count($account_variables['processing']['processed_events'] > 3)){
				//krsort($account_variables['processing']['processed_events']);
				$account_variables['processing']['processed_events'] = array_slice($account_variables['processing']['processed_events'], 0, 3, TRUE);
			}
			$object->type = 'default';
			$this->default_events[$formated_event_date] = $object;
			$return_data = 1;
		}else{
			$object->type = 'new';
			$return_data = $object;
		}
		return $return_data;
	}


	private function secondProcessEvents($account_variables){
		$this->updateCustomerVariables($account_variables);
	}


	public function renderAllEvents($ajax = FALSE){
		$account_variables = &$this->account_variables;
		if($account_variables['processing']){
			$content = array();
			$rows = array();
			$headers = array(
				'Account',
				'Date',
				'Signal Code',
				'Signal',
				'Zone',
				'Type',
				'View',
			);
			$this->test = $this->new_events_overflow;
			$account_variables['processing']['processed_events'] = !empty($this->new_events_overflow) ? $this->new_events_overflow : $account_variables['processing']['processed_events'];
			foreach($account_variables['processing']['processed_events'] as $event_dates => $event_data){
							$event_data = ( object ) $event_data;
							$style = $event_data->type == 'new' && $event_data->session == $this->session ? 'background:lime; font-weight:bold;' : '';
							if(!empty($event_data->datetime) && $event_data->type != 'default' && $event_data->session == $this->session){
								$rows[] = array(
									'data' => array(
										array(
											'data' => $event_data->account_name,
											'style' => array($style),
											'class' => array(''),
										),
										array(
											'data' => $event_data->datetime,
											'style' => array($style),
											'class' => array(''),
										),
										array(
											'data' => $event_data->event,
											'style' => array($style),
											'class' => array(''),
										),
										array(
											'data' => $event_data->signal,
											'style' => array($style),
											'class' => array(''),
										),
										array(
											'data' => $event_data->zone,
											'style' => array($style),
											'class' => array(''),
										),
										array(
											'data' => $event_data->extra,
											'style' => array($style),
											'class' => array(''),
										),
										array(
											'data' => l('View', '#', array('#html' => TRUE)),
											'style' => array($style),
											'class' => array(''),
										),
									),
								);
							}
						}

			$content['table'] = array(
				'#theme' => 'table',
				'#header' => $headers,
				'#rows' => $rows,
				'#empty' => t('No data yet...'),
				'#group' => 'wrapper',
				'#attributes' => array(
					'class' => array('large-12', 'columns'),
					'id' => 'alarm-processing-table',
				),
			);
		}
		return $content;
	}

}






class IpdatatelAlarmProcessor extends IpdatatelProcessEvents{

	public $processing_accounts;
	public $account_data;

	public function __construct($uid, $args){
		$this->uid = $uid;
		$this->args = $args;
	}

	public function setProcessingAccounts($account_variables = NULL){
		$ipdatatel = new ipDatatel();
		$this->account_data = $ipdatatel->loadAccountInformation($this->uid, $this->args);
		$all_accounts = !empty($this->account_data) ? current($this->account_data) : NULL;
		if($all_accounts && !empty($account_variables['processing'])){
			$this->account_variables = $account_variables;
			$accounts = array_intersect_assoc($all_accounts, $account_variables['processing']);
			$this->processing_accounts = !empty($accounts) ? $accounts : NULL;
			if(empty($this->processing_accounts) && $this->args == 'admin'){
				$this->processing_accounts = $all_accounts;
			}
		}
	}

	public function queryAlarmEvents($processing_accounts){
		$this->loadJsSettings();
		$eventProcessor = NULL;
		$account_variables = $this->account_variables;
		if($processing_accounts){
			$eventProcessor = $this->processConstruct($processing_accounts, $account_variables, $this->uid);
			drupal_add_js(array('ip_datatel' => array('processing_accounts' => serialize($processing_accounts), 'account_variables' => $account_variables, 'uid' => $this->uid)), 'setting');
		}
		return $eventProcessor;
	}


	private function loadJsSettings(){
		drupal_add_js(drupal_get_path('module', 'ip_datatel') .'/js/ip_datatel_alarm_notifications.js', array('type' => 'file', 'scope' => 'header'));
	}

}